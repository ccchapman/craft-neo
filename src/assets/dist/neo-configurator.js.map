{"version":3,"file":"neo-configurator.js","mappings":"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","sources":["webpack://craft-neo/webpack/bootstrap","webpack://craft-neo/webpack/runtime/compat get default export","webpack://craft-neo/webpack/runtime/define property getters","webpack://craft-neo/webpack/runtime/hasOwnProperty shorthand","webpack://craft-neo/external var \"jQuery\"","webpack://craft-neo/./src/assets/src/jquery-extensions.js","webpack://craft-neo/external var \"Garnish\"","webpack://craft-neo/external var \"Craft\"","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/native.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/rng.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/stringify.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/v4.js","webpack://craft-neo/./src/assets/src/namespace.js","webpack://craft-neo/./src/assets/src/configurator/Item.js","webpack://craft-neo/./src/assets/src/configurator/BlockTypeFieldLayout.js","webpack://craft-neo/./src/assets/src/configurator/BlockType.js","webpack://craft-neo/./src/assets/src/configurator/Settings.js","webpack://craft-neo/./src/assets/src/configurator/BlockTypeSettings.js","webpack://craft-neo/./src/assets/src/configurator/Group.js","webpack://craft-neo/./src/assets/src/configurator/GroupSettings.js","webpack://craft-neo/./src/assets/src/configurator/Configurator.js","webpack://craft-neo/./src/assets/src/configurator.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = jQuery;","import $ from 'jquery'\n\n// @see http://stackoverflow.com/a/12903503/556609\n$.fn.insertAt = function (index, $parent) {\n  return this.each(function () {\n    if (index === 0) {\n      $parent.prepend(this)\n    } else {\n      $parent.children().eq(index - 1).after(this)\n    }\n  })\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = Garnish;","const __WEBPACK_NAMESPACE_OBJECT__ = Craft;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","export default {\n\n  _stack: [[]],\n\n  enter (segments, join = true) {\n    if (typeof segments === 'string') {\n      segments = this.fromFieldName(segments)\n    }\n\n    if (join) {\n      const joined = this.getNamespace()\n      joined.push(...segments)\n\n      segments = joined\n    }\n\n    this._stack.push(segments)\n  },\n\n  enterByFieldName (fieldName, join = true) {\n    this.enter(this.fromFieldName(fieldName), join)\n  },\n\n  leave () {\n    return this._stack.length > 1\n      ? this._stack.pop()\n      : this.getNamespace()\n  },\n\n  getNamespace () {\n    return Array.from(this._stack[this._stack.length - 1])\n  },\n\n  parse (value) {\n    if (typeof value === 'string') {\n      if (value.indexOf('[') > -1) {\n        return this.fromFieldName(value)\n      }\n\n      if (value.indexOf('-') > -1) {\n        return value.split('-')\n      }\n\n      if (value.indexOf('.') > -1) {\n        return value.split('.')\n      }\n\n      return value\n    }\n\n    return Array.from(value)\n  },\n\n  value (value, separator = '-') {\n    const segments = this.getNamespace()\n    segments.push(value)\n\n    return segments.join(separator)\n  },\n\n  fieldName (fieldName = '') {\n    const prefix = this.toFieldName()\n\n    if (prefix) {\n      return prefix + fieldName.replace(/([^'\"[\\]]+)([^'\"]*)/, '[$1]$2')\n    }\n\n    return fieldName\n  },\n\n  toString (separator = '-') {\n    return this.getNamespace().join(separator)\n  },\n\n  toFieldName () {\n    const segments = this.getNamespace()\n\n    switch (segments.length) {\n      case 0: return ''\n      case 1: return segments[0]\n    }\n\n    return segments[0] + '[' + segments.slice(1).join('][') + ']'\n  },\n\n  fromFieldName (fieldName) {\n    return fieldName.match(/[^[\\]\\s]+/g) || []\n  }\n}\n","import Garnish from 'garnish'\n\nconst _defaults = {\n  settings: null\n}\n\nexport default Garnish.Base.extend({\n\n  $container: null,\n  _field: null,\n  _selected: false,\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n    this._field = settings.field\n    this._settings = settings.settings\n  },\n\n  /**\n   * @since 3.8.0\n   * @returns the Neo field this item belongs to\n   */\n  getField () {\n    return this._field\n  },\n\n  getSettings () {\n    return this._settings\n  },\n\n  /**\n   * @since 3.8.0\n   */\n  getSortOrder () {\n    return this.$container.index() + 1\n  },\n\n  select () {\n    this.toggleSelect(true)\n  },\n\n  deselect () {\n    this.toggleSelect(false)\n  },\n\n  toggleSelect: function (select) {\n    this._selected = (typeof select === 'boolean' ? select : !this._selected)\n\n    this.trigger('toggleSelect', {\n      selected: this._selected\n    })\n  },\n\n  isSelected () {\n    return this._selected\n  }\n})\n","import $ from 'jquery'\nimport Garnish from 'garnish'\nimport Craft from 'craft'\nimport NS from '../namespace'\n\nconst _defaults = {\n  namespace: [],\n  html: '',\n  layout: null,\n  id: -1,\n  blockId: null,\n  blockName: ''\n}\n\nexport default Garnish.Base.extend({\n\n  _templateNs: [],\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._id = settings.id | 0\n    this._blockTypeId = settings.blockTypeId\n\n    this.$container = $(settings.html).find('.layoutdesigner')\n    this.$container.removeAttr('id')\n\n    const nameInput = this.$container.find('input[name=\"fieldLayout\"]')\n\n    if (nameInput.length > 0) {\n      nameInput[0].name = `neoBlockType${this._blockTypeId}[fieldLayout]`\n\n      if (settings.layout) {\n        nameInput[0].value = JSON.stringify(settings.layout)\n      }\n    }\n\n    NS.enter(this._templateNs)\n\n    this._fld = new Craft.FieldLayoutDesigner(this.$container, {\n      customizableTabs: true,\n      customizableUi: true\n    })\n\n    NS.leave()\n\n    const updateChildBlocksUiElement = () => {\n      const selector = '[data-type=benf-neo-fieldlayoutelements-ChildBlocksUiElement]'\n      const $uiLibraryElement = this._fld.$uiLibraryElements.filter(selector)\n      const $tabUiElement = this._fld.$tabContainer.find(selector)\n      $uiLibraryElement.toggleClass(\n        'hidden',\n        $tabUiElement.length > 0 || $('body.dragging .draghelper' + selector).length > 0\n      )\n      if ($tabUiElement.hasClass('velocity-animating')) {\n        $tabUiElement.removeClass('hidden')\n      }\n    }\n\n    updateChildBlocksUiElement()\n    this._tabObserver = new window.MutationObserver(updateChildBlocksUiElement)\n    this._tabObserver.observe(this._fld.$tabContainer[0], { childList: true, subtree: true })\n  },\n\n  getId () {\n    return this._id\n  },\n\n  getBlockTypeId () {\n    return this._blockTypeId\n  },\n\n  getConfig () {\n    const newConfig = { tabs: [] }\n\n    for (const tab of this._fld.config.tabs) {\n      const newElements = []\n\n      for (const element of tab.elements) {\n        const newElement = {}\n\n        for (const key in element) {\n          newElement[key] = key === 'required' && !element[key] ? '' : element[key]\n        }\n\n        newElements.push(newElement)\n      }\n\n      newConfig.tabs.push({\n        elements: newElements,\n        name: tab.name.slice()\n      })\n    }\n\n    return newConfig\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Garnish from 'garnish'\nimport Item from './Item'\nimport NS from '../namespace'\nimport BlockTypeFieldLayout from './BlockTypeFieldLayout'\n\nconst _defaults = {\n  namespace: [],\n  fieldLayout: null\n}\n\nexport default Item.extend({\n\n  _templateNs: [],\n\n  init (settings = {}) {\n    this.base(settings)\n\n    const settingsObj = this.getSettings()\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._fieldLayout = settings.fieldLayout\n    const sidebarItem = this.getField()?.$sidebarContainer.find(`[data-neo-bt=\"container.${this.getId()}`)\n\n    if (sidebarItem?.length > 0) {\n      this.$container = sidebarItem\n    } else {\n      this.$container = this._generateBlockType(settingsObj)\n    }\n\n    const $neo = this.$container.find('[data-neo-bt]')\n    this.$nameText = $neo.filter('[data-neo-bt=\"text.name\"]')\n    this.$handleText = $neo.filter('[data-neo-bt=\"text.handle\"]')\n    this.$moveButton = $neo.filter('[data-neo-bt=\"button.move\"]')\n    this.$actionsButton = $neo.filter('[data-neo-bt=\"button.actions\"]')\n    this.$actionsMenu = $neo.filter('[data-neo-bt=\"container.menu\"]')\n\n    this._actionsMenu = new Garnish.MenuBtn(this.$actionsButton)\n    this._actionsMenu.on('optionSelect', e => this['@actionSelect'](e))\n\n    // Stop the actions button click from selecting the block type and closing the menu\n    this.addListener(this.$actionsButton, 'click', e => e.stopPropagation())\n\n    if (settingsObj) {\n      settingsObj.on('change', () => this._updateTemplate())\n      settingsObj.on('destroy', () => this.trigger('destroy'))\n\n      this._updateTemplate()\n    }\n\n    this.deselect()\n  },\n\n  _generateBlockType (settings) {\n    const sortOrderNamespace = [...this._templateNs]\n    sortOrderNamespace.pop()\n    NS.enter(sortOrderNamespace)\n    const sortOrderName = NS.fieldName('sortOrder')\n    NS.leave()\n    const errors = settings.getErrors()\n    const hasErrors = (Array.isArray(errors) ? errors : Object.keys(errors)).length > 0\n\n    return $(`\n      <div class=\"nc_sidebar_list_item${hasErrors ? ' has-errors' : ''}\" data-neo-bt=\"container.${this.getId()}\">\n        <div class=\"label\" data-neo-bt=\"text.name\">${settings.getName()}</div>\n        <div class=\"smalltext light code\" data-neo-bt=\"text.handle\">${settings.getHandle()}</div>\n        <a class=\"move icon\" title=\"${Craft.t('neo', 'Reorder')}\" role=\"button\" data-neo-bt=\"button.move\"></a>\n        <button class=\"settings icon menubtn\" title=\"${Craft.t('neo', 'Actions')}\" role=\"button\" type=\"button\" data-neo-bt=\"button.actions\"></button>\n        <div class=\"menu\" data-neo-bt=\"container.menu\">\n          <ul class=\"padded\">\n            <li><a data-icon=\"field\" data-action=\"copy\">${Craft.t('neo', 'Copy')}</a></li>\n            <li class=\"disabled\"><a data-icon=\"brush\" data-action=\"paste\">${Craft.t('neo', 'Paste')}</a></li>\n            <li><a data-icon=\"share\" data-action=\"clone\">${Craft.t('neo', 'Clone')}</a></li>\n            <li><a class=\"error\" data-icon=\"remove\" data-action=\"delete\">${Craft.t('neo', 'Delete')}</a></li>\n          </ul>\n        </div>\n        <input type=\"hidden\" name=\"${sortOrderName}[]\" value=\"blocktype:${this.getId()}\" data-neo-gs=\"input.sortOrder\">\n      </div>`)\n  },\n\n  getId () {\n    return this.getSettings().getId()\n  },\n\n  getFieldLayout () {\n    return this._fieldLayout\n  },\n\n  loadFieldLayout () {\n    if (this._fieldLayout) {\n      // Already loaded\n      return Promise.resolve()\n    }\n\n    this.trigger('beforeLoadFieldLayout')\n    const settings = this.getSettings()\n    const layout = settings.getFieldLayoutConfig()\n    const layoutId = settings.getFieldLayoutId()\n    const data = layout ? { layout } : { layoutId }\n\n    return new Promise((resolve, reject) => {\n      Craft.sendActionRequest('POST', 'neo/configurator/render-field-layout', { data })\n        .then(response => {\n          this._fieldLayout = new BlockTypeFieldLayout({\n            namespace: [...this._templateNs, this._id],\n            html: response.data.html,\n            id: layoutId,\n            blockTypeId: settings.getId()\n          })\n\n          this.trigger('afterLoadFieldLayout')\n          resolve()\n        })\n        .catch(reject)\n    })\n  },\n\n  toggleSelect: function (select) {\n    this.base(select)\n\n    const settings = this.getSettings()\n    const fieldLayout = this.getFieldLayout()\n    const selected = this.isSelected()\n\n    if (settings?.$container ?? false) {\n      settings.$container.toggleClass('hidden', !selected)\n    }\n\n    if (fieldLayout) {\n      fieldLayout.$container.toggleClass('hidden', !selected)\n    } else if (selected) {\n      this.loadFieldLayout()\n    }\n\n    this.$container.toggleClass('is-selected', selected)\n  },\n\n  _updateTemplate () {\n    const settings = this.getSettings()\n\n    if (settings) {\n      this.$nameText.text(settings.getName())\n      this.$handleText.text(settings.getHandle())\n      this.$container.toggleClass('is-child', !settings.getTopLevel())\n    }\n  },\n\n  '@actionSelect' (e) {\n    const $option = $(e.option)\n\n    if ($option.hasClass('disabled')) {\n      return\n    }\n\n    switch ($option.attr('data-action')) {\n      case 'copy':\n        this.trigger('copy')\n        break\n      case 'paste':\n        this.trigger('paste')\n        break\n      case 'clone':\n        this.trigger('clone')\n        break\n      case 'delete':\n        if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this block type?'))) {\n          this.getSettings().destroy()\n        }\n    }\n  }\n})\n","import $ from 'jquery'\nimport Garnish from 'garnish'\n\nexport default Garnish.Base.extend({\n\n  $container: new $(),\n\n  /**\n   * @deprecated in 3.8.0\n   */\n  getSortOrder (_) {\n    console.warn('Settings.getSortOrder() is deprecated. Use Item.getSortOrder() instead.')\n  },\n\n  /**\n   * @deprecated in 3.8.0\n   */\n  setSortOrder (_) {\n    console.warn('Settings.setSortOrder() is deprecated and no longer used.')\n  },\n\n  getFocusElement () {\n    return new $()\n  },\n\n  destroy () {\n    this.$foot?.remove()\n    this.trigger('destroy')\n  },\n\n  _refreshSetting ($container, showSetting, animate) {\n    animate = !Garnish.prefersReducedMotion() && (typeof animate === 'boolean' ? animate : true)\n\n    if (animate) {\n      if (showSetting) {\n        if ($container.hasClass('hidden')) {\n          $container\n            .removeClass('hidden')\n            .css({\n              opacity: 0,\n              marginBottom: -($container.outerHeight())\n            })\n            .velocity({\n              opacity: 1,\n              marginBottom: 24\n            }, 'fast')\n        }\n      } else if (!$container.hasClass('hidden')) {\n        $container\n          .css({\n            opacity: 1,\n            marginBottom: 24\n          })\n          .velocity({\n            opacity: 0,\n            marginBottom: -($container.outerHeight())\n          }, 'fast', () => {\n            $container.addClass('hidden')\n          })\n      }\n    } else {\n      $container\n        .toggleClass('hidden', !showSetting)\n        .css('margin-bottom', showSetting ? 24 : '')\n    }\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Garnish from 'garnish'\nimport NS from '../namespace'\nimport Settings from './Settings'\n\nconst _defaults = {\n  namespace: [],\n  id: null,\n  sortOrder: 0,\n  fieldLayoutId: null,\n  fieldLayoutConfig: null,\n  name: '',\n  handle: '',\n  description: '',\n  enabled: true,\n  ignorePermissions: true,\n  minBlocks: 0,\n  maxBlocks: 0,\n  minSiblingBlocks: 0,\n  maxSiblingBlocks: 0,\n  minChildBlocks: 0,\n  maxChildBlocks: 0,\n  topLevel: true,\n  childBlocks: null,\n  childBlockTypes: [],\n  html: null,\n  js: null,\n  errors: {}\n}\n\nexport default Settings.extend({\n\n  _templateNs: [],\n  _childBlockTypes: [],\n  _initialised: false,\n\n  $container: null,\n  $nameInput: new $(),\n  $handleInput: new $(),\n  $descriptionInput: new $(),\n  $minBlocksInput: new $(),\n  $maxBlocksInput: new $(),\n  $minSiblingBlocksInput: new $(),\n  $maxSiblingBlocksInput: new $(),\n  $minChildBlocksInput: new $(),\n  $maxChildBlocksInput: new $(),\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._childBlockTypes = []\n    this._childBlocks = settings.childBlocks\n    this._id = settings.id\n    this._fieldLayoutId = settings.fieldLayoutId\n    this._fieldLayoutConfig = settings.fieldLayoutConfig\n    this._errors = settings.errors\n    this._settingsChildBlockTypes = settings.childBlockTypes\n    this._afterCreateContainer = () => {\n      this.setName(settings.name)\n      this.setHandle(settings.handle)\n      this.setDescription(settings.description)\n      this._setIconId(settings.iconId)\n      this.setEnabled(settings.enabled)\n      this.setIgnorePermissions(settings.ignorePermissions)\n      this.setMinBlocks(settings.minBlocks)\n      this.setMaxBlocks(settings.maxBlocks)\n      this.setMinSiblingBlocks(settings.minSiblingBlocks)\n      this.setMaxSiblingBlocks(settings.maxSiblingBlocks)\n      this.setMinChildBlocks(settings.minChildBlocks)\n      this.setMaxChildBlocks(settings.maxChildBlocks)\n      this.setTopLevel(settings.topLevel)\n    }\n\n    if (settings.html !== null) {\n      this.createContainer({\n        html: settings.html,\n        js: settings.js\n      })\n    }\n  },\n\n  createContainer (containerData) {\n    // Only create it if it doesn't already exist\n    if (this.$container !== null) {\n      return\n    }\n\n    this.$container = $(containerData.html)\n    this._js = containerData.js ?? ''\n\n    const $neo = this.$container.find('[data-neo-bts]')\n    this.$nameInput = $neo.filter('[data-neo-bts=\"input.name\"]')\n    this.$handleInput = $neo.filter('[data-neo-bts=\"input.handle\"]')\n    this.$descriptionInput = $neo.filter('[data-neo-bts=\"input.description\"]')\n    this.$iconIdContainer = $neo.filter('[data-neo-bts=\"container.iconId\"]')\n    this.$enabledInput = $neo.filter('[data-neo-bts=\"input.enabled\"]')\n    this.$enabledContainer = $neo.filter('[data-neo-bts=\"container.enabled\"]')\n    this.$ignorePermissionsInput = $neo.filter('[data-neo-bts=\"input.ignorePermissions\"]')\n    this.$ignorePermissionsContainer = $neo.filter('[data-neo-bts=\"container.ignorePermissions\"]')\n    this.$minBlocksInput = $neo.filter('[data-neo-bts=\"input.minBlocks\"]')\n    this.$maxBlocksInput = $neo.filter('[data-neo-bts=\"input.maxBlocks\"]')\n    this.$minSiblingBlocksInput = $neo.filter('[data-neo-bts=\"input.minSiblingBlocks\"]')\n    this.$maxSiblingBlocksInput = $neo.filter('[data-neo-bts=\"input.maxSiblingBlocks\"]')\n    this.$minChildBlocksInput = $neo.filter('[data-neo-bts=\"input.minChildBlocks\"]')\n    this.$minChildBlocksContainer = $neo.filter('[data-neo-bts=\"container.minChildBlocks\"]')\n    this.$maxChildBlocksInput = $neo.filter('[data-neo-bts=\"input.maxChildBlocks\"]')\n    this.$maxChildBlocksContainer = $neo.filter('[data-neo-bts=\"container.maxChildBlocks\"]')\n    this.$topLevelInput = $neo.filter('[data-neo-bts=\"input.topLevel\"]')\n    this.$topLevelContainer = $neo.filter('[data-neo-bts=\"container.topLevel\"]')\n    this.$groupChildBlockTypesInput = $neo.filter('[data-neo-bts=\"input.groupChildBlockTypes\"]')\n    this.$groupChildBlockTypesContainer = $neo.filter('[data-neo-bts=\"container.groupChildBlockTypes\"]')\n    this.$childBlocksInput = $neo.filter('[data-neo-bts=\"input.childBlocks\"]')\n    this.$childBlocksContainer = $neo.filter('[data-neo-bts=\"container.childBlocks\"]')\n    this.$deleteButton = $neo.filter('[data-neo-bts=\"button.delete\"]')\n\n    this._afterCreateContainer()\n  },\n\n  initUi () {\n    if (this._initialised) {\n      return\n    }\n\n    this.$foot = $(this._js)\n    Garnish.$bod.append(this.$foot)\n\n    Craft.initUiElements(this.$container)\n\n    this._childBlocksSelect = this.$childBlocksInput.data('checkboxSelect')\n    this._enabledLightswitch = this.$enabledInput.data('lightswitch')\n    this._ignorePermissionsLightswitch = this.$ignorePermissionsInput.data('lightswitch')\n    this._topLevelLightswitch = this.$topLevelInput.data('lightswitch')\n    this._groupChildBlockTypesLightswitch = this.$groupChildBlockTypesInput.data('lightswitch')\n    this._handleGenerator = new Craft.HandleGenerator(this.$nameInput, this.$handleInput)\n\n    // Ensure that an existing block type's handle will not be changed if the name is edited first.\n    if (this.getHandle() !== '') {\n      this._handleGenerator.stopListening()\n    }\n\n    for (const blockType of this._settingsChildBlockTypes) {\n      this.addChildBlockType(blockType)\n    }\n\n    this.setChildBlocks(this._childBlocks)\n\n    this.addListener(this.$nameInput, 'keyup change', () => {\n      this.setName(this.$nameInput.val())\n\n      if (this._handleGenerator.listening) {\n        // Wait for the handle to be auto-updated\n        setTimeout(() => this.setHandle(this.$handleInput.val()), 200)\n      }\n    })\n\n    this.addListener(this.$handleInput, 'keyup change textchange', () => this.setHandle(this.$handleInput.val()))\n    this.addListener(this.$descriptionInput, 'keyup change textchange', () => this.setDescription(this.$descriptionInput.val()))\n    this.addListener(this.$iconIdContainer, 'change', () => {\n      setTimeout(\n        () => {\n          const $iconIdInput = this.$iconIdInput\n          const iconId = $iconIdInput.length > 0 ? $iconIdInput.val() : null\n          this._setIconId(iconId)\n        },\n        500\n      )\n    })\n    this.addListener(this._enabledLightswitch, 'change', () => this.setEnabled(this._enabledLightswitch.on))\n    this.addListener(this._ignorePermissionsLightswitch, 'change', () => this.setIgnorePermissions(this._ignorePermissionsLightswitch.on))\n    this.addListener(this.$minBlocksInput, 'keyup change', () => this.setMinBlocks(this.$minBlocksInput.val()))\n    this.addListener(this.$maxBlocksInput, 'keyup change', () => this.setMaxBlocks(this.$maxBlocksInput.val()))\n    this.addListener(this.$minSiblingBlocksInput, 'keyup change', () => this.setMinSiblingBlocks(this.$minSiblingBlocksInput.val()))\n    this.addListener(this.$maxSiblingBlocksInput, 'keyup change', () => this.setMaxSiblingBlocks(this.$maxSiblingBlocksInput.val()))\n    this.addListener(this.$minChildBlocksInput, 'keyup change', () => this.setMinChildBlocks(this.$minChildBlocksInput.val()))\n    this.addListener(this.$maxChildBlocksInput, 'keyup change', () => this.setMaxChildBlocks(this.$maxChildBlocksInput.val()))\n    this.addListener(this.$topLevelInput, 'change', () => this.setTopLevel(this._topLevelLightswitch.on))\n    this.addListener(this.$groupChildBlockTypesInput, 'change', () => this.setTopLevel(this._groupChildBlockTypesLightswitch.on))\n    this.addListener(this.$deleteButton, 'click', () => {\n      if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this block type?'))) {\n        this.destroy()\n      }\n    })\n\n    this.$childBlocksInput.on('change', 'input', () => this._refreshChildBlockSettings())\n\n    this._initialised = true\n  },\n\n  _generateChildBlocksCheckbox (settings) {\n    NS.enter(this._templateNs)\n    const id = NS.value('childBlock-' + settings.getId(), '-')\n    const name = NS.fieldName('childBlocks')\n    NS.leave()\n\n    return $(`\n      <div>\n        <input type=\"checkbox\" value=\"${settings.getHandle()}\" id=\"${id}\" class=\"checkbox\" name=\"${name}[]\" data-neo-btsc=\"input\">\n        <label for=\"${id}\" data-neo-btsc=\"text.label\">${settings.getName()}</label>\n      </div>`)\n  },\n\n  get $iconIdInput () {\n    return this.$iconIdContainer.find('input[type=\"hidden\"]')\n  },\n\n  getFocusInput () {\n    return this.$nameInput\n  },\n\n  getId () {\n    return this._id\n  },\n\n  getFieldLayoutId () {\n    return this._fieldLayoutId\n  },\n\n  getFieldLayoutConfig () {\n    return Object.assign({}, this._fieldLayoutConfig)\n  },\n\n  isNew () {\n    return /^new/.test(this.getId())\n  },\n\n  getErrors () {\n    return this._errors\n  },\n\n  /**\n   * @deprecated in 3.8.0\n   */\n  setSortOrder (_) {\n    console.warn('BlockTypeSettings.setSortOrder() is deprecated and no longer used.')\n  },\n\n  getName () { return this._name },\n  setName (name) {\n    if (name !== this._name) {\n      const oldName = this._name\n      this._name = name\n\n      if (this.$nameInput.val() !== this._name) {\n        this.$nameInput.val(this._name)\n      }\n\n      this.trigger('change', {\n        property: 'name',\n        oldValue: oldName,\n        newValue: this._name\n      })\n    }\n  },\n\n  getHandle () { return this._handle },\n  setHandle (handle) {\n    if (handle !== this._handle) {\n      const oldHandle = this._handle\n      this._handle = handle\n\n      if (this.$handleInput.val() !== this._handle) {\n        this.$handleInput.val(this._handle)\n      }\n\n      this.trigger('change', {\n        property: 'handle',\n        oldValue: oldHandle,\n        newValue: this._handle\n      })\n    }\n  },\n\n  getDescription () { return this._description },\n  setDescription (description) {\n    if (description !== this._description) {\n      const oldDescription = this._description\n      this._description = description\n\n      if (this.$descriptionInput.val() !== this._description) {\n        this.$descriptionInput.val(this._description)\n      }\n\n      this.trigger('change', {\n        property: 'description',\n        oldValue: oldDescription,\n        newValue: this._description\n      })\n    }\n  },\n\n  getIconId () { return this._iconId },\n  _setIconId (iconId) {\n    if (iconId !== this._iconId) {\n      const oldIconId = this._iconId\n      this._iconId = iconId\n\n      if (this.$iconIdInput.val() !== this._iconId) {\n        // TODO\n        // This is normally where we would reset the input value, but since the icon ID setting is an asset field, we\n        // would also need to update the element HTML. This would be good to implement in the future, and then this\n        // method could be made public.\n      }\n\n      this.trigger('change', {\n        property: 'iconId',\n        oldValue: oldIconId,\n        newValue: this._iconId\n      })\n    }\n  },\n\n  getEnabled () { return this._enabled },\n  setEnabled (enabled) { this._setLightswitchField('enabled', enabled) },\n\n  getIgnorePermissions () { return this._ignorePermissions },\n  setIgnorePermissions (ignore) { this._setLightswitchField('ignorePermissions', ignore) },\n\n  getMinBlocks () { return this._minBlocks },\n  setMinBlocks (minBlocks) { this._setBlocksConstraint('minBlocks', minBlocks) },\n\n  getMaxBlocks () { return this._maxBlocks },\n  setMaxBlocks (maxBlocks) { this._setBlocksConstraint('maxBlocks', maxBlocks) },\n\n  getMinSiblingBlocks () { return this._minSiblingBlocks },\n  setMinSiblingBlocks (minSiblingBlocks) { this._setBlocksConstraint('minSiblingBlocks', minSiblingBlocks) },\n\n  getMaxSiblingBlocks () { return this._maxSiblingBlocks },\n  setMaxSiblingBlocks (maxSiblingBlocks) { this._setBlocksConstraint('maxSiblingBlocks', maxSiblingBlocks) },\n\n  getMinChildBlocks () { return this._minChildBlocks },\n  getMaxChildBlocks () { return this._maxChildBlocks },\n  setMinChildBlocks (minChildBlocks) { this._setBlocksConstraint('minChildBlocks', minChildBlocks) },\n  setMaxChildBlocks (maxChildBlocks) { this._setBlocksConstraint('maxChildBlocks', maxChildBlocks) },\n  _setBlocksConstraint (mode, value) {\n    const privateProp = `_${mode}`\n    const jqueryProp = `$${mode}Input`\n    const oldValue = this[privateProp]\n    const newValue = Math.max(0, value | 0)\n\n    if (newValue === 0) {\n      this[jqueryProp].val(null)\n    }\n\n    if (oldValue !== newValue) {\n      this[privateProp] = newValue\n\n      if (this[privateProp] > 0 && parseInt(this[jqueryProp].val()) !== this[privateProp]) {\n        this[jqueryProp].val(this[privateProp])\n      }\n\n      this.trigger('change', {\n        property: mode,\n        oldValue,\n        newValue: this[privateProp]\n      })\n    }\n  },\n\n  getTopLevel () { return this._topLevel },\n  setTopLevel (topLevel) { this._setLightswitchField('topLevel', topLevel) },\n\n  _setLightswitchField (property, value) {\n    const privateProp = `_${property}`\n    const lightswitchProp = `${privateProp}Lightswitch`\n    const oldValue = this[privateProp]\n    const newValue = !!value\n\n    if (oldValue !== newValue) {\n      this[privateProp] = newValue\n\n      if (this[lightswitchProp] && this[lightswitchProp].on !== this[privateProp]) {\n        this[lightswitchProp].on = this[privateProp]\n        this[lightswitchProp].toggle()\n      }\n\n      this.trigger('change', {\n        property,\n        oldValue,\n        newValue\n      })\n    }\n  },\n\n  getChildBlocks () {\n    const select = this._childBlocksSelect\n    const childBlocks = []\n\n    if (typeof select === 'undefined') {\n      return this._childBlocks === true ? true : Array.from(this._childBlocks ?? [])\n    }\n\n    if (select.$all.prop('checked')) {\n      return true\n    }\n\n    select.$options.each(function (index) {\n      const $option = $(this)\n\n      if ($option.prop('checked')) {\n        childBlocks.push($option.val())\n      }\n    })\n\n    return childBlocks.length > 0 ? childBlocks : false\n  },\n\n  setChildBlocks (childBlocks) {\n    const select = this._childBlocksSelect\n\n    if (childBlocks === true || childBlocks === '*') {\n      select.$all.prop('checked', true)\n      select.onAllChange()\n    } else if (Array.isArray(childBlocks)) {\n      select.$all.prop('checked', false)\n\n      for (const handle of childBlocks) {\n        select.$options.filter(`[value=\"${handle}\"]`).prop('checked', true)\n      }\n    } else {\n      select.$all.prop('checked', false)\n      select.$options.prop('checked', false)\n    }\n\n    this._refreshChildBlockSettings(false)\n  },\n\n  addChildBlockType (blockType) {\n    if (!this._childBlockTypes.includes(blockType)) {\n      const settings = blockType.getSettings()\n      const $checkbox = this._generateChildBlocksCheckbox(settings)\n\n      this._childBlockTypes.push(blockType)\n      this.$childBlocksContainer.append($checkbox)\n\n      this._refreshChildBlocks()\n\n      const select = this._childBlocksSelect\n      const allChecked = select.$all.prop('checked')\n      select.$options = select.$options.add($checkbox.find('input'))\n      if (allChecked) select.onAllChange()\n\n      const eventNs = '.childBlock' + this.getId()\n      settings.on('change' + eventNs, e => this['@onChildBlockTypeChange'](e, blockType, $checkbox))\n      settings.on('destroy' + eventNs, e => this.removeChildBlockType(blockType))\n    }\n  },\n\n  removeChildBlockType (blockType) {\n    const index = this._childBlockTypes.indexOf(blockType)\n    if (index >= 0) {\n      this._childBlockTypes.splice(index, 1)\n\n      const settings = blockType.getSettings()\n      const $checkbox = this.$childBlocksContainer.children().eq(index)\n\n      $checkbox.remove()\n\n      const select = this._childBlocksSelect\n      select.$options = select.$options.remove($checkbox.find('input'))\n\n      const eventNs = '.childBlock' + this.getId()\n      settings.off(eventNs)\n\n      this._refreshChildBlocks()\n    }\n  },\n\n  getConditions () {\n    NS.enter(this._templateNs)\n    const baseInputName = NS.toFieldName().replaceAll('\\\\', '\\\\\\\\')\n    NS.leave()\n    const baseConditionInputNameWithExtraSlash = `${baseInputName}[conditions]`\n    const baseConditionInputName = baseConditionInputNameWithExtraSlash.replaceAll('\\\\\\\\', '\\\\')\n    const conditionInputNames = this.$container\n      .find(`[name^=\"${baseConditionInputNameWithExtraSlash}\"]`)\n      .get()\n      .map((condition) => condition.name)\n\n    const allFormData = new window.FormData(this.$container.closest('form').get(0))\n    const conditionsData = {}\n\n    conditionInputNames.forEach((conditionInputName) => {\n      let conditionsSubData = conditionsData\n      const conditionsCurrentPath = [baseConditionInputName]\n      const conditionsDataPath = conditionInputName\n        .replace(baseConditionInputName, '')\n        .slice(1, -1)\n        .split('][')\n\n      conditionsDataPath.forEach((pathStep, i) => {\n        conditionsCurrentPath.push(`[${pathStep}]`)\n\n        if (pathStep !== '' && !(pathStep in conditionsSubData)) {\n          if (pathStep === 'values') {\n            conditionsSubData[pathStep] = []\n          } else if (i < conditionsDataPath.length - 1) {\n            conditionsSubData[pathStep] = {}\n          } else {\n            conditionsSubData[pathStep] = allFormData.get(conditionsCurrentPath.join(''))\n          }\n        } else if (pathStep === '') {\n          conditionsSubData.push(...allFormData.getAll(conditionsCurrentPath.join('')))\n        }\n\n        conditionsSubData = conditionsSubData[pathStep]\n      })\n    })\n\n    return conditionsData\n  },\n\n  _refreshChildBlocks () {\n    const blockTypes = Array.from(this._childBlockTypes)\n    const $options = this.$childBlocksContainer.children()\n\n    const getOption = blockType => $options.get(blockTypes.indexOf(blockType))\n\n    this._childBlockTypes = this._childBlockTypes.sort((a, b) => a.getSortOrder() - b.getSortOrder())\n    $options.remove()\n\n    for (const blockType of this._childBlockTypes) {\n      const $option = getOption(blockType)\n      this.$childBlocksContainer.append($option)\n    }\n  },\n\n  _refreshChildBlockSettings (animate) {\n    const showSettings = !!this.getChildBlocks()\n    this._refreshSetting(this.$minChildBlocksContainer, showSettings, animate)\n    this._refreshSetting(this.$maxChildBlocksContainer, showSettings, animate)\n    this._refreshSetting(this.$groupChildBlockTypesContainer, showSettings, animate)\n  },\n\n  '@onChildBlockTypeChange' (e, blockType, $checkbox) {\n    const $neo = $checkbox.find('[data-neo-btsc]')\n    const $input = $neo.filter('[data-neo-btsc=\"input\"]')\n    const $labelText = $neo.filter('[data-neo-btsc=\"text.label\"]')\n\n    switch (e.property) {\n      case 'name':\n        $labelText.text(e.newValue)\n        break\n\n      case 'handle':\n        $input.val(e.newValue)\n        break\n\n      case 'sortOrder':\n        this._refreshChildBlocks()\n        break\n    }\n  }\n},\n{\n  _totalNewBlockTypes: 0,\n\n  getNewId () {\n    return `new${this._totalNewBlockTypes++}`\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Item from './Item'\nimport NS from '../namespace'\n\nconst _defaults = {\n  namespace: []\n}\n\nexport default Item.extend({\n\n  _templateNs: [],\n\n  init (settings = {}) {\n    this.base(settings)\n\n    settings = Object.assign({}, _defaults, settings)\n\n    const settingsObj = this.getSettings()\n    this._templateNs = NS.parse(settings.namespace)\n    const sidebarItem = this.getField()?.$sidebarContainer.find(`[data-neo-g=\"container.${this.getId()}`)\n\n    if (sidebarItem?.length > 0) {\n      this.$container = sidebarItem\n    } else {\n      this.$container = this._generateGroup(settingsObj)\n    }\n\n    const $neo = this.$container.find('[data-neo-g]')\n    this.$nameText = $neo.filter('[data-neo-g=\"text.name\"]')\n    this.$moveButton = $neo.filter('[data-neo-g=\"button.move\"]')\n\n    if (settingsObj) {\n      settingsObj.on('change', () => this._updateTemplate())\n      settingsObj.on('destroy', () => this.trigger('destroy'))\n    }\n\n    this.deselect()\n  },\n\n  _generateGroup (settings) {\n    const sortOrderNamespace = [...this._templateNs]\n    sortOrderNamespace.pop()\n    NS.enter(sortOrderNamespace)\n    const sortOrderName = NS.fieldName('sortOrder')\n    NS.leave()\n\n    return $(`\n      <div class=\"nc_sidebar_list_item type-heading\" data-neo-g=\"container.${this.getId()}\">\n        <div class=\"label\" data-neo-g=\"text.name\">${settings.getName() ?? ''}</div>\n        <a class=\"move icon\" title=\"${Craft.t('neo', 'Reorder')}\" role=\"button\" data-neo-g=\"button.move\"></a>\n        <input type=\"hidden\" name=\"${sortOrderName}[]\" value=\"group:${this.getId()}\" data-neo-g=\"input.sortOrder\">\n      </div>`)\n  },\n\n  getId () {\n    return this.getSettings().getId()\n  },\n\n  toggleSelect: function (select) {\n    this.base(select)\n\n    const settings = this.getSettings()\n    const selected = this.isSelected()\n\n    if (settings) {\n      settings.$container.toggleClass('hidden', !selected)\n    }\n\n    this.$container.toggleClass('is-selected', selected)\n  },\n\n  _updateTemplate () {\n    const settings = this.getSettings()\n\n    if (settings) {\n      this.$nameText.text(settings.getName())\n    }\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport NS from '../namespace'\nimport Settings from './Settings'\n\nconst _defaults = {\n  namespace: [],\n  id: null,\n  sortOrder: 0,\n  name: '',\n  alwaysShowDropdown: null,\n  defaultAlwaysShowGroupDropdowns: true\n}\n\nexport default Settings.extend({\n\n  _templateNs: [],\n\n  $sortOrderInput: new $(),\n  $nameInput: new $(),\n  $handleInput: new $(),\n  $maxBlocksInput: new $(),\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._id = settings.id\n    this._alwaysShowDropdown = settings.alwaysShowDropdown\n    this._defaultAlwaysShowGroupDropdowns = settings.defaultAlwaysShowGroupDropdowns\n\n    this.$container = this._generateGroupSettings()\n\n    const $neo = this.$container.find('[data-neo-gs]')\n    this.$nameInput = $neo.filter('[data-neo-gs=\"input.name\"]')\n    this.$deleteButton = $neo.filter('[data-neo-gs=\"button.delete\"]')\n    this.$alwaysShowDropdownContainer = $neo.filter('[data-neo-gs=\"container.alwaysShowDropdown\"]')\n\n    this.setName(settings.name)\n\n    this.addListener(this.$nameInput, 'keyup change', () => this.setName(this.$nameInput.val()))\n    this.addListener(this.$deleteButton, 'click', () => {\n      if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this group?'))) {\n        this.destroy()\n      }\n    })\n  },\n\n  _generateGroupSettings () {\n    NS.enter(this._templateNs)\n    const nameInputId = NS.value('name', '-')\n    const nameInputName = NS.fieldName('name')\n    const alwaysShowDropdownId = NS.value('alwaysShowDropdown', '-')\n    const alwaysShowDropdownName = NS.fieldName('alwaysShowDropdown')\n    NS.leave()\n    const alwaysShowDropdownOptions = [\n      {\n        value: 'show',\n        label: Craft.t('neo', 'Show')\n      },\n      {\n        value: 'hide',\n        label: Craft.t('neo', 'Hide')\n      },\n      {\n        value: 'global',\n        label: this._defaultAlwaysShowGroupDropdowns ? Craft.t('neo', 'Use global setting (Show)') : Craft.t('neo', 'Use global setting (Hide)')\n      }\n    ]\n    const $nameInput = Craft.ui.createTextField({\n      type: 'text',\n      id: nameInputId,\n      name: nameInputName,\n      label: Craft.t('neo', 'Name'),\n      instructions: Craft.t('neo', 'This can be left blank if you just want an unlabeled separator.'),\n      value: this.getName()\n    })\n    $nameInput.find('input').attr('data-neo-gs', 'input.name')\n\n    return $(`\n      <div>\n        <div>\n          ${$('<div class=\"field\">').append($nameInput).html()}\n          <div data-neo-gs=\"container.alwaysShowDropdown\">\n            <div class=\"field\">\n              ${Craft.ui.createSelectField({\n                label: Craft.t('neo', 'Always Show Dropdown?'),\n                instructions: Craft.t('neo', 'Whether to show the dropdown for this group if it only has one available block type.'),\n                id: alwaysShowDropdownId,\n                name: alwaysShowDropdownName,\n                options: alwaysShowDropdownOptions,\n                value: this._alwaysShowDropdown ? 'show' : (this._alwaysShowDropdown === false ? 'hide' : 'global')\n              }).html()}\n            </div>\n          </div>\n        </div>\n        <hr>\n        <a class=\"error delete\" data-neo-gs=\"button.delete\">${Craft.t('neo', 'Delete group')}</a>\n      </div>`)\n  },\n\n  getFocusInput () {\n    return this.$nameInput\n  },\n\n  getId () {\n    return this._id\n  },\n\n  /**\n   * @deprecated in 3.8.0\n   */\n  setSortOrder (_) {\n    console.warn('GroupSettings.setSortOrder() is deprecated and no longer used.')\n  },\n\n  getName () { return this._name },\n  setName (name) {\n    if (name !== this._name) {\n      const oldName = this._name\n      this._name = name\n\n      this.$nameInput.val(this._name)\n      this._refreshAlwaysShowDropdown()\n\n      this.trigger('change', {\n        property: 'name',\n        oldValue: oldName,\n        newValue: this._name\n      })\n    }\n  },\n\n  getAlwaysShowDropdown () { return this._alwaysShowDropdown },\n\n  _refreshAlwaysShowDropdown (animate) {\n    this._refreshSetting(this.$alwaysShowDropdownContainer, !!this._name, animate)\n  }\n},\n{\n  _totalNewGroups: 0,\n\n  getNewId () {\n    return `new${this._totalNewGroups++}`\n  }\n})\n","import $ from 'jquery'\nimport '../jquery-extensions'\n\nimport Garnish from 'garnish'\nimport Craft from 'craft'\nimport { v4 as uuidv4 } from 'uuid'\nimport NS from '../namespace'\n\nimport BlockType from './BlockType'\nimport BlockTypeSettings from './BlockTypeSettings'\nimport BlockTypeFieldLayout from './BlockTypeFieldLayout'\nimport Group from './Group'\nimport GroupSettings from './GroupSettings'\nimport './styles/configurator.scss'\n\nconst _defaults = {\n  namespace: [],\n  blockTypes: [],\n  groups: [],\n  blockTypeSettingsHtml: '',\n  blockTypeSettingsJs: '',\n  fieldLayoutHtml: ''\n}\n\nexport default Garnish.Base.extend({\n\n  _templateNs: [],\n  _items: [],\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    const inputIdPrefix = Craft.formatInputId(settings.namespace)\n    const $field = $(`#${inputIdPrefix}-neo-configurator`)\n    this.$container = $field.children('.field').children('.input')\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._blockTypeSettingsHtml = settings.blockTypeSettingsHtml\n    this._blockTypeSettingsJs = settings.blockTypeSettingsJs\n    this._fieldLayoutHtml = settings.fieldLayoutHtml\n    this._items = []\n\n    const $neo = this.$container.find('[data-neo]')\n    this.$mainContainer = $neo.filter('[data-neo=\"container.main\"]')\n    this.$sidebarContainer = $neo.filter('[data-neo=\"container.sidebar\"]')\n    this.$blockTypesContainer = $neo.filter('[data-neo=\"container.blockTypes\"]')\n    this.$settingsContainer = $neo.filter('[data-neo=\"container.settings\"]')\n    this.$fieldLayoutContainer = $neo.filter('[data-neo=\"container.fieldLayout\"]')\n    this.$blockTypeButton = $neo.filter('[data-neo=\"button.blockType\"]')\n    this.$groupButton = $neo.filter('[data-neo=\"button.group\"]')\n    this.$settingsButton = $neo.filter('[data-neo=\"button.settings\"]')\n    this.$fieldLayoutButton = $neo.filter('[data-neo=\"button.fieldLayout\"]')\n\n    this._itemSort = new Garnish.DragSort(null, {\n      container: this.$blockTypeItemsContainer,\n      handle: '[data-neo-bt=\"button.move\"], [data-neo-g=\"button.move\"]',\n      axis: 'y',\n      onSortChange: () => this._updateItemOrder()\n    })\n\n    // Add the existing block types and groups\n    const existingItems = []\n    const btNamespace = [...this._templateNs, 'items', 'blockTypes']\n    const gNamespace = [...this._templateNs, 'items', 'groups']\n\n    for (const btInfo of settings.blockTypes) {\n      const btSettings = new BlockTypeSettings({\n        namespace: [...btNamespace, btInfo.id],\n        sortOrder: btInfo.sortOrder,\n        id: btInfo.id,\n        name: btInfo.name,\n        handle: btInfo.handle,\n        description: btInfo.description,\n        iconId: btInfo.iconId,\n        enabled: btInfo.enabled,\n        ignorePermissions: btInfo.ignorePermissions,\n        minBlocks: btInfo.minBlocks,\n        maxBlocks: btInfo.maxBlocks,\n        minSiblingBlocks: btInfo.minSiblingBlocks,\n        maxSiblingBlocks: btInfo.maxSiblingBlocks,\n        minChildBlocks: btInfo.minChildBlocks,\n        maxChildBlocks: btInfo.maxChildBlocks,\n        topLevel: btInfo.topLevel,\n        html: btInfo.settingsHtml,\n        js: btInfo.settingsJs,\n        errors: btInfo.errors,\n        fieldLayoutId: btInfo.fieldLayoutId,\n        fieldLayoutConfig: btInfo.fieldLayoutConfig,\n        childBlockTypes: existingItems.filter(item => item instanceof BlockType)\n      })\n\n      const blockType = new BlockType({\n        namespace: btNamespace,\n        field: this,\n        settings: btSettings\n      })\n\n      blockType.on('copy.configurator', () => this._copyBlockType(blockType))\n      blockType.on('paste.configurator', () => this._pasteBlockType())\n      blockType.on('clone.configurator', () => this._createBlockTypeFrom(blockType))\n      blockType.on('beforeLoadFieldLayout.configurator', () => this.$fieldLayoutContainer.append(\n        $('<span class=\"spinner\"/></span>')\n      ))\n      blockType.on('afterLoadFieldLayout.configurator', () => {\n        this.$fieldLayoutContainer.children('.spinner').remove()\n        this._addFieldLayout(blockType.getFieldLayout())\n      })\n      existingItems.push(blockType)\n    }\n\n    for (const gInfo of settings.groups) {\n      const gSettings = new GroupSettings({\n        namespace: [...gNamespace, gInfo.id],\n        sortOrder: gInfo.sortOrder,\n        id: gInfo.id,\n        name: gInfo.name,\n        alwaysShowDropdown: gInfo.alwaysShowDropdown,\n        defaultAlwaysShowGroupDropdowns: settings.defaultAlwaysShowGroupDropdowns\n      })\n\n      const group = new Group({\n        namespace: gNamespace,\n        field: this,\n        settings: gSettings\n      })\n\n      existingItems.push(group)\n    }\n\n    for (const item of existingItems.sort((a, b) => a.getSortOrder() - b.getSortOrder())) {\n      this.addItem(item)\n    }\n\n    for (const blockType of this.getBlockTypes()) {\n      const btSettings = blockType.getSettings()\n      const info = settings.blockTypes.find(i => i.handle === btSettings.getHandle())\n\n      btSettings.setChildBlocks(info.childBlocks)\n    }\n\n    // Make sure menu states (for pasting block types) are updated when changing tabs\n    const refreshPasteOptions = () => {\n      const noPasteData = !window.localStorage.getItem('neo:copyBlockType')\n\n      for (const blockType of this.getBlockTypes()) {\n        blockType.$actionsMenu.find('[data-action=\"paste\"]').parent().toggleClass('disabled', noPasteData)\n      }\n    }\n\n    refreshPasteOptions()\n    this.addListener(document, 'visibilitychange.configurator', refreshPasteOptions)\n\n    this.selectTab('settings')\n\n    this.addListener(this.$blockTypeButton, 'click', '@newBlockType')\n    this.addListener(this.$groupButton, 'click', '@newGroup')\n    this.addListener(this.$settingsButton, 'click', () => this.selectTab('settings'))\n    this.addListener(this.$fieldLayoutButton, 'click', () => this.selectTab('fieldLayout'))\n  },\n\n  addItem (item, index = -1) {\n    const settings = item.getSettings()\n\n    this._insertAt(item.$container, index)\n    this._itemSort.addItems(item.$container)\n\n    if (settings) {\n      this.$settingsContainer.append(settings.$container)\n\n      if (item instanceof BlockType) {\n        settings.initUi()\n      }\n    }\n\n    this.$mainContainer.removeClass('hidden')\n\n    this.addListener(item.$container, 'click', '@selectItem')\n    item.on('destroy.configurator', () => this.removeItem(item, false))\n\n    if (item instanceof BlockType) {\n      this._addFieldLayout(item.getFieldLayout())\n    }\n\n    this._items.push(item)\n    this._updateItemOrder()\n\n    if (item instanceof BlockType) {\n      for (const blockType of this.getBlockTypes()) {\n        const btSettings = blockType.getSettings()\n        if (btSettings) btSettings.addChildBlockType(item)\n      }\n    }\n\n    this.trigger('addItem', {\n      item,\n      index\n    })\n  },\n\n  _addFieldLayout (fieldLayout) {\n    if (fieldLayout) {\n      this.$fieldLayoutContainer.append(fieldLayout.$container)\n    }\n  },\n\n  removeItem (item, showConfirm) {\n    showConfirm = (typeof showConfirm === 'boolean' ? showConfirm : false)\n\n    if (showConfirm) {\n      const message = Craft.t('neo', 'Are you sure you want to delete this {type}?', {\n        type:\n        item instanceof BlockType\n          ? 'block type'\n          : item instanceof Group\n            ? 'group'\n            : 'item'\n      })\n\n      if (window.confirm(message)) {\n        this.removeItem(item, false)\n      }\n    } else {\n      const settings = item.getSettings()\n\n      this._itemSort.removeItems(item.$container)\n\n      item.$container.remove()\n      if (settings) settings.$container.remove()\n\n      if (item instanceof BlockType) {\n        const fieldLayout = item.getFieldLayout()\n        if (fieldLayout) fieldLayout.$container.remove()\n      }\n\n      this.removeListener(item.$container, 'click')\n      item.off('.configurator')\n\n      this._updateItemOrder()\n\n      if (this._items.length === 0) {\n        this.$mainContainer.addClass('hidden')\n      }\n\n      this.trigger('removeItem', {\n        item\n      })\n    }\n  },\n\n  getItems () {\n    return Array.from(this._items)\n  },\n\n  getItemByElement ($element) {\n    return this._items.find(item => item.$container.is($element))\n  },\n\n  getSelectedItem () {\n    return this._items.find(item => item.isSelected())\n  },\n\n  selectItem (item, focusInput) {\n    focusInput = (typeof focusInput === 'boolean' ? focusInput : true)\n\n    const settings = item ? item.getSettings() : null\n\n    for (const i of this._items) {\n      const thisIsTheItem = i === item\n      i.toggleSelect(thisIsTheItem)\n\n      if (thisIsTheItem) {\n        const itemIsGroup = !(i instanceof BlockType)\n        this.$fieldLayoutButton.toggleClass('hidden', itemIsGroup)\n\n        if (itemIsGroup) {\n          this.selectTab('settings')\n        }\n      }\n    }\n\n    Craft.ElementThumbLoader.retryAll()\n\n    if (focusInput && settings && !Garnish.isMobileBrowser()) {\n      setTimeout(() => settings.getFocusInput().focus(), 100)\n    }\n  },\n\n  getBlockTypes () {\n    return this._items.filter(item => item instanceof BlockType)\n  },\n\n  getGroups () {\n    return this._items.filter(item => item instanceof Group)\n  },\n\n  selectTab (tab) {\n    this.$settingsContainer.toggleClass('hidden', tab !== 'settings')\n    this.$fieldLayoutContainer.toggleClass('hidden', tab !== 'fieldLayout')\n\n    this.$settingsButton.toggleClass('is-selected', tab === 'settings')\n    this.$fieldLayoutButton.toggleClass('is-selected', tab === 'fieldLayout')\n  },\n\n  _getNewBlockTypeSettingsHtml (blockTypeId, sortOrder) {\n    return this._blockTypeSettingsHtml.replace(/__NEOBLOCKTYPE_ID__/g, blockTypeId)\n  },\n\n  _getNewBlockTypeSettingsJs (blockTypeId) {\n    return this._blockTypeSettingsJs.replace(/__NEOBLOCKTYPE_ID__/g, blockTypeId)\n  },\n\n  _getNewFieldLayoutHtml () {\n    return this._fieldLayoutHtml.replace(\n      /&quot;uid&quot;:&quot;([a-f0-9-]+)&quot;/,\n      `&quot;uid&quot;:&quot;${uuidv4()}&quot;`\n    )\n  },\n\n  _updateItemOrder () {\n    const items = []\n\n    this._itemSort.$items.each((index, element) => {\n      const item = this.getItemByElement(element)\n\n      if (item) {\n        items.push(item)\n      }\n    })\n\n    this._items = items\n  },\n\n  _createBlockTypeFrom (oldBlockType) {\n    const namespace = [...this._templateNs, 'items', 'blockTypes']\n    const id = BlockTypeSettings.getNewId()\n    const selectedItem = this.getSelectedItem()\n    const selectedIndex = selectedItem ? selectedItem.getSortOrder() : -1\n\n    if (oldBlockType === null) {\n      const settings = new BlockTypeSettings({\n        childBlockTypes: this.getBlockTypes(),\n        id,\n        namespace: [...namespace, id],\n        sortOrder: this._items.length,\n        html: this._getNewBlockTypeSettingsHtml(id, selectedIndex),\n        js: this._getNewBlockTypeSettingsJs(id)\n      })\n      const fieldLayout = new BlockTypeFieldLayout({\n        blockTypeId: id,\n        html: this._getNewFieldLayoutHtml(),\n        namespace: [...namespace, id]\n      })\n\n      this._initBlockType(namespace, settings, fieldLayout, selectedIndex)\n    } else {\n      const oldSettings = oldBlockType.getSettings()\n      const settingsObj = {\n        childBlocks: oldSettings.getChildBlocks(),\n        conditions: oldSettings.getConditions(),\n        // Set a timestamp on the handle so it doesn't clash with the old one\n        handle: `${oldSettings.getHandle()}_${Date.now()}`,\n        id,\n        minBlocks: oldSettings.getMinBlocks(),\n        maxBlocks: oldSettings.getMaxBlocks(),\n        minChildBlocks: oldSettings.getMinChildBlocks(),\n        maxChildBlocks: oldSettings.getMaxChildBlocks(),\n        minSiblingBlocks: oldSettings.getMinSiblingBlocks(),\n        maxSiblingBlocks: oldSettings.getMaxSiblingBlocks(),\n        name: oldSettings.getName(),\n        description: oldSettings.getDescription(),\n        iconId: oldSettings.getIconId(),\n        enabled: oldSettings.getEnabled(),\n        ignorePermissions: oldSettings.getIgnorePermissions(),\n        sortOrder: this._items.length,\n        topLevel: oldSettings.getTopLevel()\n      }\n      const settings = new BlockTypeSettings({\n        ...settingsObj,\n        childBlockTypes: this.getBlockTypes(),\n        namespace: [...namespace, id]\n      })\n      const $spinner = $('<div class=\"nc_sidebar_list_item type-spinner\"><span class=\"spinner\"></span></div>')\n      this._insertAt($spinner, selectedIndex)\n\n      oldBlockType.loadFieldLayout()\n        .then(() => {\n          const layout = oldBlockType.getFieldLayout().getConfig()\n          const data = {\n            settings: settingsObj,\n            layout: layout.tabs.length > 0 ? layout : null\n          }\n\n          Craft.queue.push(() => new Promise((resolve, reject) => {\n            Craft.sendActionRequest('POST', 'neo/configurator/render-block-type', { data })\n              .then(response => {\n                const fieldLayout = new BlockTypeFieldLayout({\n                  blockTypeId: id,\n                  html: response.data.layoutHtml,\n                  namespace: [...namespace, id]\n                })\n                settings.createContainer({\n                  html: response.data.settingsHtml.replace(/__NEOBLOCKTYPE_ID__/g, id),\n                  js: response.data.settingsJs.replace(/__NEOBLOCKTYPE_ID__/g, id)\n                })\n\n                this.$blockTypesContainer.find('.type-spinner').remove()\n                this._initBlockType(namespace, settings, fieldLayout, selectedIndex)\n                resolve()\n              })\n              .catch(reject)\n          }))\n        })\n        .catch(() => Craft.cp.displayError(Craft.t('neo', 'Couldn’t create new block type.')))\n    }\n  },\n\n  _initBlockType (namespace, settings, fieldLayout, index) {\n    const blockType = new BlockType({\n      namespace,\n      field: this,\n      settings,\n      fieldLayout\n    })\n\n    this.addItem(blockType, index)\n    this.selectItem(blockType)\n    this.selectTab('settings')\n\n    blockType.on('copy.configurator', () => this._copyBlockType(blockType))\n    blockType.on('paste.configurator', () => this._pasteBlockType())\n    blockType.on('clone.configurator', () => this._createBlockTypeFrom(blockType))\n  },\n\n  _copyBlockType (blockType) {\n    blockType.loadFieldLayout()\n      .then(() => {\n        const settings = blockType.getSettings()\n        const data = {\n          childBlocks: settings.getChildBlocks(),\n          conditions: settings.getConditions(),\n          description: settings.getDescription(),\n          enabled: settings.getEnabled(),\n          iconId: settings.getIconId(),\n          ignorePermissions: settings.getIgnorePermissions(),\n          handle: settings.getHandle(),\n          layout: blockType.getFieldLayout().getConfig(),\n          minBlocks: settings.getMinBlocks(),\n          maxBlocks: settings.getMaxBlocks(),\n          minChildBlocks: settings.getMinChildBlocks(),\n          maxChildBlocks: settings.getMaxChildBlocks(),\n          minSiblingBlocks: settings.getMinSiblingBlocks(),\n          maxSiblingBlocks: settings.getMaxSiblingBlocks(),\n          name: settings.getName(),\n          topLevel: settings.getTopLevel()\n        }\n\n        window.localStorage.setItem('neo:copyBlockType', JSON.stringify(data))\n        this.getBlockTypes().forEach(bt => bt.$actionsMenu.find('[data-action=\"paste\"]').parent().removeClass('disabled'))\n      })\n      .catch(() => Craft.cp.displayError(Craft.t('neo', 'Couldn’t copy block type.')))\n  },\n\n  _pasteBlockType () {\n    const encodedData = window.localStorage.getItem('neo:copyBlockType')\n\n    if (!encodedData) {\n      return\n    }\n\n    const data = JSON.parse(encodedData)\n    const blockTypeHandles = this.getBlockTypes().map(bt => bt.getSettings().getHandle())\n    const childBlocks = Array.isArray(data.childBlocks)\n      ? data.childBlocks.filter(cb => blockTypeHandles.includes(cb))\n      : (data.childBlocks ? true : [])\n    const settings = new BlockTypeSettings({\n      childBlocks,\n      childBlockTypes: this.getBlockTypes(),\n      conditions: data.conditions,\n      description: data.description,\n      iconId: data.iconId,\n      enabled: data.enabled,\n      ignorePermissions: data.ignorePermissions,\n      handle: data.handle,\n      minBlocks: data.minBlocks,\n      maxBlocks: data.maxBlocks,\n      minChildBlocks: data.minChildBlocks,\n      maxChildBlocks: data.maxChildBlocks,\n      minSiblingBlocks: data.minSiblingBlocks,\n      maxSiblingBlocks: data.maxSiblingBlocks,\n      name: data.name,\n      topLevel: data.topLevel,\n      html: ''\n    })\n\n    const fieldLayout = new BlockTypeFieldLayout({\n      html: this._getNewFieldLayoutHtml(),\n      layout: data.layout\n    })\n\n    const blockType = new BlockType({\n      field: this,\n      settings,\n      fieldLayout\n    })\n\n    this._createBlockTypeFrom(blockType)\n  },\n\n  _insertAt (element, index) {\n    const $element = $(element)\n\n    if (index >= 0 && index < this._items.length) {\n      $element.insertAt(index, this.$blockTypesContainer)\n    } else {\n      this.$blockTypesContainer.append($element)\n    }\n  },\n\n  '@newBlockType' () {\n    this._createBlockTypeFrom(null)\n  },\n\n  '@newGroup' () {\n    const namespace = [...this._templateNs, 'items', 'groups']\n    const id = GroupSettings.getNewId()\n\n    const settings = new GroupSettings({\n      namespace: [...namespace, id],\n      sortOrder: this._items.length,\n      id\n    })\n\n    const group = new Group({\n      namespace,\n      field: this,\n      settings\n    })\n\n    const selected = this.getSelectedItem()\n    const index = selected ? selected.getSortOrder() : -1\n\n    this.addItem(group, index)\n    this.selectItem(group)\n  },\n\n  '@selectItem' (e) {\n    const item = this.getItemByElement(e.currentTarget)\n\n    this.selectItem(item)\n  }\n})\n","import Configurator from './configurator/Configurator'\n\nconst context = window ?? this\nconst configurators = []\n\ncontext.Neo = {\n  Configurator,\n  configurators,\n\n  createConfigurator (settings = {}) {\n    const configurator = new Configurator(settings)\n    configurators.push(configurator)\n\n    return configurator\n  }\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","jQuery","$","index","$parent","this","each","prepend","children","eq","after","Garnish","Craft","randomUUID","crypto","bind","getRandomValues","rnds8","Uint8Array","rng","Error","byteToHex","i","push","toString","slice","unsafeStringify","arr","offset","toLowerCase","options","buf","rnds","random","_stack","enter","segments","join","arguments","length","undefined","fromFieldName","joined","getNamespace","enterByFieldName","fieldName","leave","pop","Array","from","parse","value","indexOf","split","separator","prefix","toFieldName","replace","match","_defaults","settings","$container","_field","_selected","init","assign","field","_settings","getField","getSettings","getSortOrder","select","toggleSelect","deselect","trigger","selected","isSelected","namespace","html","layout","id","blockId","blockName","_templateNs","NS","_id","_blockTypeId","blockTypeId","find","removeAttr","nameInput","name","concat","JSON","stringify","_fld","customizableTabs","customizableUi","updateChildBlocksUiElement","selector","$uiLibraryElement","$uiLibraryElements","filter","$tabUiElement","$tabContainer","toggleClass","hasClass","removeClass","_tabObserver","window","MutationObserver","observe","childList","subtree","getId","getBlockTypeId","getConfig","newConfig","tabs","tab","config","newElements","element","elements","newElement","fieldLayout","Item","extend","_this$getField","base","settingsObj","_fieldLayout","sidebarItem","$sidebarContainer","_generateBlockType","$neo","$nameText","$handleText","$moveButton","$actionsButton","$actionsMenu","_actionsMenu","on","e","addListener","stopPropagation","_updateTemplate","sortOrderNamespace","sortOrderName","errors","getErrors","hasErrors","isArray","keys","getName","getHandle","getFieldLayout","loadFieldLayout","Promise","resolve","getFieldLayoutConfig","layoutId","getFieldLayoutId","data","reject","then","response","BlockTypeFieldLayout","catch","_settings$$container","text","getTopLevel","$option","option","attr","confirm","destroy","_","console","warn","setSortOrder","getFocusElement","_this$$foot","$foot","remove","_refreshSetting","showSetting","animate","css","opacity","marginBottom","outerHeight","velocity","addClass","sortOrder","fieldLayoutId","fieldLayoutConfig","handle","description","enabled","ignorePermissions","minBlocks","maxBlocks","minSiblingBlocks","maxSiblingBlocks","minChildBlocks","maxChildBlocks","topLevel","childBlocks","childBlockTypes","js","Settings","_childBlockTypes","_initialised","$nameInput","$handleInput","$descriptionInput","$minBlocksInput","$maxBlocksInput","$minSiblingBlocksInput","$maxSiblingBlocksInput","$minChildBlocksInput","$maxChildBlocksInput","_childBlocks","_fieldLayoutId","_fieldLayoutConfig","_errors","_settingsChildBlockTypes","_afterCreateContainer","setName","setHandle","setDescription","_setIconId","iconId","setEnabled","setIgnorePermissions","setMinBlocks","setMaxBlocks","setMinSiblingBlocks","setMaxSiblingBlocks","setMinChildBlocks","setMaxChildBlocks","setTopLevel","createContainer","containerData","_containerData$js","_js","$iconIdContainer","$enabledInput","$enabledContainer","$ignorePermissionsInput","$ignorePermissionsContainer","$minChildBlocksContainer","$maxChildBlocksContainer","$topLevelInput","$topLevelContainer","$groupChildBlockTypesInput","$groupChildBlockTypesContainer","$childBlocksInput","$childBlocksContainer","$deleteButton","initUi","_childBlocksSelect","_enabledLightswitch","_ignorePermissionsLightswitch","_topLevelLightswitch","_groupChildBlockTypesLightswitch","_handleGenerator","stopListening","blockType","addChildBlockType","setChildBlocks","val","listening","setTimeout","$iconIdInput","_refreshChildBlockSettings","_generateChildBlocksCheckbox","getFocusInput","isNew","test","_name","oldName","property","oldValue","newValue","_handle","oldHandle","getDescription","_description","oldDescription","getIconId","_iconId","oldIconId","getEnabled","_enabled","_setLightswitchField","getIgnorePermissions","_ignorePermissions","ignore","getMinBlocks","_minBlocks","_setBlocksConstraint","getMaxBlocks","_maxBlocks","getMinSiblingBlocks","_minSiblingBlocks","getMaxSiblingBlocks","_maxSiblingBlocks","getMinChildBlocks","_minChildBlocks","getMaxChildBlocks","_maxChildBlocks","mode","privateProp","jqueryProp","Math","max","parseInt","_topLevel","lightswitchProp","toggle","getChildBlocks","_this$_childBlocks","$all","$options","onAllChange","includes","$checkbox","append","_refreshChildBlocks","allChecked","add","eventNs","removeChildBlockType","splice","off","getConditions","baseInputName","replaceAll","baseConditionInputNameWithExtraSlash","baseConditionInputName","conditionInputNames","map","condition","allFormData","FormData","closest","conditionsData","forEach","conditionInputName","conditionsSubData","conditionsCurrentPath","conditionsDataPath","pathStep","getAll","blockTypes","getOption","sort","b","showSettings","$input","$labelText","_totalNewBlockTypes","getNewId","_generateGroup","_settings$getName","alwaysShowDropdown","defaultAlwaysShowGroupDropdowns","$sortOrderInput","_alwaysShowDropdown","_defaultAlwaysShowGroupDropdowns","_generateGroupSettings","$alwaysShowDropdownContainer","nameInputId","nameInputName","alwaysShowDropdownId","alwaysShowDropdownName","alwaysShowDropdownOptions","label","type","instructions","_refreshAlwaysShowDropdown","getAlwaysShowDropdown","_totalNewGroups","groups","blockTypeSettingsHtml","blockTypeSettingsJs","fieldLayoutHtml","_items","inputIdPrefix","$field","_blockTypeSettingsHtml","_blockTypeSettingsJs","_fieldLayoutHtml","$mainContainer","$blockTypesContainer","$settingsContainer","$fieldLayoutContainer","$blockTypeButton","$groupButton","$settingsButton","$fieldLayoutButton","_itemSort","container","$blockTypeItemsContainer","axis","onSortChange","_updateItemOrder","existingItems","btNamespace","gNamespace","btInfo","btSettings","BlockTypeSettings","settingsHtml","settingsJs","item","BlockType","_copyBlockType","_pasteBlockType","_createBlockTypeFrom","_addFieldLayout","gInfo","gSettings","GroupSettings","group","Group","addItem","getBlockTypes","info","refreshPasteOptions","noPasteData","localStorage","getItem","parent","document","selectTab","_insertAt","addItems","removeItem","showConfirm","message","removeItems","removeListener","getItems","getItemByElement","$element","is","getSelectedItem","selectItem","focusInput","thisIsTheItem","itemIsGroup","focus","getGroups","_getNewBlockTypeSettingsHtml","_getNewBlockTypeSettingsJs","_getNewFieldLayoutHtml","uuidv4","items","$items","oldBlockType","selectedItem","selectedIndex","_initBlockType","oldSettings","conditions","Date","now","_objectSpread","$spinner","layoutHtml","setItem","bt","encodedData","blockTypeHandles","cb","insertAt","currentTarget","context","_window","configurators","Neo","Configurator","createConfigurator","configurator"],"sourceRoot":""}