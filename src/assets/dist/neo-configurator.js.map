{"version":3,"file":"neo-configurator.js","mappings":"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","sources":["webpack://craft-neo/webpack/bootstrap","webpack://craft-neo/webpack/runtime/compat get default export","webpack://craft-neo/webpack/runtime/define property getters","webpack://craft-neo/webpack/runtime/hasOwnProperty shorthand","webpack://craft-neo/external var \"jQuery\"","webpack://craft-neo/./src/assets/src/jquery-extensions.js","webpack://craft-neo/external var \"Garnish\"","webpack://craft-neo/external var \"Craft\"","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/native.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/rng.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/stringify.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/v4.js","webpack://craft-neo/./src/assets/src/namespace.js","webpack://craft-neo/./src/assets/src/configurator/Item.js","webpack://craft-neo/./src/assets/src/configurator/BlockTypeFieldLayout.js","webpack://craft-neo/./src/assets/src/configurator/BlockType.js","webpack://craft-neo/./src/assets/src/configurator/Settings.js","webpack://craft-neo/./src/assets/src/configurator/BlockTypeSettings.js","webpack://craft-neo/./src/assets/src/configurator/Group.js","webpack://craft-neo/./src/assets/src/configurator/GroupSettings.js","webpack://craft-neo/./src/assets/src/configurator/Configurator.js","webpack://craft-neo/./src/assets/src/configurator.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = jQuery;","import $ from 'jquery'\n\n// @see http://stackoverflow.com/a/12903503/556609\n$.fn.insertAt = function (index, $parent) {\n  return this.each(function () {\n    if (index === 0) {\n      $parent.prepend(this)\n    } else {\n      $parent.children().eq(index - 1).after(this)\n    }\n  })\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = Garnish;","const __WEBPACK_NAMESPACE_OBJECT__ = Craft;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","export default {\n\n  _stack: [[]],\n\n  enter (segments, join = true) {\n    if (typeof segments === 'string') {\n      segments = this.fromFieldName(segments)\n    }\n\n    if (join) {\n      const joined = this.getNamespace()\n      joined.push(...segments)\n\n      segments = joined\n    }\n\n    this._stack.push(segments)\n  },\n\n  enterByFieldName (fieldName, join = true) {\n    this.enter(this.fromFieldName(fieldName), join)\n  },\n\n  leave () {\n    return this._stack.length > 1\n      ? this._stack.pop()\n      : this.getNamespace()\n  },\n\n  getNamespace () {\n    return Array.from(this._stack[this._stack.length - 1])\n  },\n\n  parse (value) {\n    if (typeof value === 'string') {\n      if (value.indexOf('[') > -1) {\n        return this.fromFieldName(value)\n      }\n\n      if (value.indexOf('-') > -1) {\n        return value.split('-')\n      }\n\n      if (value.indexOf('.') > -1) {\n        return value.split('.')\n      }\n\n      return value\n    }\n\n    return Array.from(value)\n  },\n\n  value (value, separator = '-') {\n    const segments = this.getNamespace()\n    segments.push(value)\n\n    return segments.join(separator)\n  },\n\n  fieldName (fieldName = '') {\n    const prefix = this.toFieldName()\n\n    if (prefix) {\n      return prefix + fieldName.replace(/([^'\"[\\]]+)([^'\"]*)/, '[$1]$2')\n    }\n\n    return fieldName\n  },\n\n  toString (separator = '-') {\n    return this.getNamespace().join(separator)\n  },\n\n  toFieldName () {\n    const segments = this.getNamespace()\n\n    switch (segments.length) {\n      case 0: return ''\n      case 1: return segments[0]\n    }\n\n    return segments[0] + '[' + segments.slice(1).join('][') + ']'\n  },\n\n  fromFieldName (fieldName) {\n    return fieldName.match(/[^[\\]\\s]+/g) || []\n  }\n}\n","import Garnish from 'garnish'\n\nconst _defaults = {\n  settings: null\n}\n\nexport default Garnish.Base.extend({\n\n  $container: null,\n  _field: null,\n  _selected: false,\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n    this._field = settings.field\n    this._settings = settings.settings\n  },\n\n  /**\n   * @since 3.8.0\n   * @returns the Neo field this item belongs to\n   */\n  getField () {\n    return this._field\n  },\n\n  getSettings () {\n    return this._settings\n  },\n\n  /**\n   * @since 3.8.0\n   */\n  getSortOrder () {\n    return this.$container.index() + 1\n  },\n\n  select () {\n    this.toggleSelect(true)\n  },\n\n  deselect () {\n    this.toggleSelect(false)\n  },\n\n  toggleSelect: function (select) {\n    this._selected = (typeof select === 'boolean' ? select : !this._selected)\n\n    this.trigger('toggleSelect', {\n      selected: this._selected\n    })\n  },\n\n  isSelected () {\n    return this._selected\n  }\n})\n","import $ from 'jquery'\nimport Garnish from 'garnish'\nimport Craft from 'craft'\nimport NS from '../namespace'\n\nconst _defaults = {\n  namespace: [],\n  html: '',\n  layout: null,\n  id: -1,\n  blockId: null,\n  blockName: ''\n}\n\nexport default Garnish.Base.extend({\n\n  _templateNs: [],\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._id = settings.id | 0\n    this._blockTypeId = settings.blockTypeId\n\n    this.$container = $(settings.html).find('.layoutdesigner')\n    this.$container.removeAttr('id')\n\n    const nameInput = this.$container.find('input[name=\"fieldLayout\"]')\n\n    if (nameInput.length > 0) {\n      nameInput[0].name = `neoBlockType${this._blockTypeId}[fieldLayout]`\n\n      if (settings.layout) {\n        nameInput[0].value = JSON.stringify(settings.layout)\n      }\n    }\n\n    NS.enter(this._templateNs)\n\n    this._fld = new Craft.FieldLayoutDesigner(this.$container, {\n      customizableTabs: true,\n      customizableUi: true\n    })\n\n    NS.leave()\n\n    const updateChildBlocksUiElement = () => {\n      const selector = '[data-type=benf-neo-fieldlayoutelements-ChildBlocksUiElement]'\n      const $uiLibraryElement = this._fld.$uiLibraryElements.filter(selector)\n      const $tabUiElement = this._fld.$tabContainer.find(selector)\n      $uiLibraryElement.toggleClass(\n        'hidden',\n        $tabUiElement.length > 0 || $('body.dragging .draghelper' + selector).length > 0\n      )\n      if ($tabUiElement.hasClass('velocity-animating')) {\n        $tabUiElement.removeClass('hidden')\n      }\n    }\n\n    updateChildBlocksUiElement()\n    this._tabObserver = new window.MutationObserver(updateChildBlocksUiElement)\n    this._tabObserver.observe(this._fld.$tabContainer[0], { childList: true, subtree: true })\n  },\n\n  getId () {\n    return this._id\n  },\n\n  getBlockTypeId () {\n    return this._blockTypeId\n  },\n\n  getConfig () {\n    const newConfig = { tabs: [] }\n\n    for (const tab of this._fld.config.tabs) {\n      const newElements = []\n\n      for (const element of tab.elements) {\n        const newElement = {}\n\n        for (const key in element) {\n          newElement[key] = key === 'required' && !element[key] ? '' : element[key]\n        }\n\n        newElements.push(newElement)\n      }\n\n      newConfig.tabs.push({\n        elements: newElements,\n        name: tab.name.slice()\n      })\n    }\n\n    return newConfig\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Item from './Item'\nimport NS from '../namespace'\nimport BlockTypeFieldLayout from './BlockTypeFieldLayout'\n\nconst _defaults = {\n  namespace: [],\n  fieldLayout: null\n}\n\nexport default Item.extend({\n\n  _templateNs: [],\n  _loaded: false,\n\n  init (settings = {}) {\n    this.base(settings)\n\n    const settingsObj = this.getSettings()\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._field = settings.field\n    this._fieldLayout = settings.fieldLayout\n    const sidebarItem = this.getField()?.$sidebarContainer.find(`[data-neo-bt=\"container.${this.getId()}`)\n\n    if (sidebarItem?.length > 0) {\n      this.$container = sidebarItem\n    } else {\n      this.$container = this._generateBlockType(settingsObj)\n    }\n\n    const $neo = this.$container.find('[data-neo-bt]')\n    this.$nameText = $neo.filter('[data-neo-bt=\"text.name\"]')\n    this.$handleText = $neo.filter('[data-neo-bt=\"text.handle\"]')\n    this.$moveButton = $neo.filter('[data-neo-bt=\"button.move\"]')\n    this.$actionsButton = $neo.filter('[data-neo-bt=\"button.actions\"]')\n    this.$actionsMenu = $neo.filter('[data-neo-bt=\"container.menu\"]')\n\n    // Set up the actions menu\n    this.$actionsButton.menubtn()\n    this._actionsMenu = this.$actionsButton.data('menubtn')\n    this._actionsMenu.on('optionSelect', e => this['@actionSelect'](e))\n\n    // Stop the actions button click from selecting the block type and closing the menu\n    this.addListener(this.$actionsButton, 'click', e => e.stopPropagation())\n\n    if (settingsObj) {\n      settingsObj.on('change', () => this._updateTemplate())\n      settingsObj.on('destroy', () => this.trigger('destroy'))\n\n      this._updateTemplate()\n    }\n\n    this.deselect()\n  },\n\n  _generateBlockType (settings) {\n    const sortOrderNamespace = [...this._templateNs]\n    sortOrderNamespace.pop()\n    NS.enter(sortOrderNamespace)\n    const sortOrderName = NS.fieldName('sortOrder')\n    NS.leave()\n    const errors = settings.getErrors()\n    const hasErrors = (Array.isArray(errors) ? errors : Object.keys(errors)).length > 0\n\n    return $(`\n      <div class=\"nc_sidebar_list_item${hasErrors ? ' has-errors' : ''}\" data-neo-bt=\"container.${this.getId()}\">\n        <div class=\"label\" data-neo-bt=\"text.name\">${settings.getName()}</div>\n        <div class=\"smalltext light code\" data-neo-bt=\"text.handle\">${settings.getHandle()}</div>\n        <a class=\"move icon\" title=\"${Craft.t('neo', 'Reorder')}\" role=\"button\" data-neo-bt=\"button.move\"></a>\n        <button class=\"settings icon menubtn\" title=\"${Craft.t('neo', 'Actions')}\" role=\"button\" type=\"button\" data-neo-bt=\"button.actions\"></button>\n        <div class=\"menu\" data-neo-bt=\"container.menu\">\n          <ul class=\"padded\">\n            <li><a data-icon=\"field\" data-action=\"copy\">${Craft.t('neo', 'Copy')}</a></li>\n            <li class=\"disabled\"><a data-icon=\"brush\" data-action=\"paste\">${Craft.t('neo', 'Paste')}</a></li>\n            <li><a data-icon=\"share\" data-action=\"clone\">${Craft.t('neo', 'Clone')}</a></li>\n            <li><a class=\"error\" data-icon=\"remove\" data-action=\"delete\">${Craft.t('neo', 'Delete')}</a></li>\n          </ul>\n        </div>\n        <input type=\"hidden\" name=\"${sortOrderName}[]\" value=\"blocktype:${this.getId()}\" data-neo-gs=\"input.sortOrder\">\n      </div>`)\n  },\n\n  getId () {\n    return this.getSettings().getId()\n  },\n\n  getFieldLayout () {\n    return this._fieldLayout\n  },\n\n  /**\n   * @deprecated in 3.8.0, use load() instead\n   */\n  loadFieldLayout () {\n    this.load()\n  },\n\n  /**\n   * @since 3.8.0\n   * @returns Promise\n   */\n  load () {\n    if (this._loaded) {\n      // Already loaded\n      return Promise.resolve()\n    }\n\n    this.trigger('beforeLoad')\n    this.trigger('beforeLoadFieldLayout') // TODO: remove in 4.0.0\n    const settings = this.getSettings()\n    const layout = settings.getFieldLayoutConfig()\n    const layoutId = settings.getFieldLayoutId()\n    const data = {\n      blockTypeId: this.getId(),\n      layout\n    }\n\n    return new Promise((resolve, reject) => {\n      Craft.sendActionRequest('POST', 'neo/configurator/render-block-type', { data })\n        .then(response => {\n          this._fieldLayout = new BlockTypeFieldLayout({\n            namespace: [...this._templateNs, this._id],\n            html: response.data.layoutHtml,\n            id: layoutId,\n            blockTypeId: data.blockTypeId\n          })\n          this._settings.createContainer({\n            html: response.data.settingsHtml.replace(/__NEOBLOCKTYPE_ID__/g, data.blockTypeId),\n            js: response.data.settingsJs.replace(/__NEOBLOCKTYPE_ID__/g, data.blockTypeId)\n          })\n          this._field?.addItem(this)\n          this._loaded = true\n\n          this.trigger('afterLoad')\n          this.trigger('afterLoadFieldLayout') // TODO: remove in 4.0.0\n          resolve()\n        })\n        .catch(reject)\n    })\n  },\n\n  toggleSelect: function (select) {\n    this.base(select)\n\n    const settings = this.getSettings()\n    const fieldLayout = this.getFieldLayout()\n    const selected = this.isSelected()\n\n    if (settings?.$container ?? false) {\n      settings.$container.toggleClass('hidden', !selected)\n    }\n\n    if (fieldLayout) {\n      fieldLayout.$container.toggleClass('hidden', !selected)\n    } else if (selected) {\n      this.load()\n    }\n\n    this.$container.toggleClass('is-selected', selected)\n  },\n\n  _updateTemplate () {\n    const settings = this.getSettings()\n\n    if (settings) {\n      this.$nameText.text(settings.getName())\n      this.$handleText.text(settings.getHandle())\n      this.$container.toggleClass('is-child', !settings.getTopLevel())\n    }\n  },\n\n  '@actionSelect' (e) {\n    const $option = $(e.option)\n\n    if ($option.hasClass('disabled')) {\n      return\n    }\n\n    this._actionsMenu?.hideMenu()\n\n    switch ($option.attr('data-action')) {\n      case 'copy':\n        this.trigger('copy')\n        break\n      case 'paste':\n        this.trigger('paste')\n        break\n      case 'clone':\n        this.trigger('clone')\n        break\n      case 'delete':\n        if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this block type?'))) {\n          this.getSettings().destroy()\n        }\n    }\n  }\n})\n","import $ from 'jquery'\nimport Garnish from 'garnish'\n\nexport default Garnish.Base.extend({\n\n  $container: new $(),\n\n  /**\n   * @deprecated in 3.8.0\n   */\n  getSortOrder (_) {\n    console.warn('Settings.getSortOrder() is deprecated. Use Item.getSortOrder() instead.')\n  },\n\n  /**\n   * @deprecated in 3.8.0\n   */\n  setSortOrder (_) {\n    console.warn('Settings.setSortOrder() is deprecated and no longer used.')\n  },\n\n  getFocusElement () {\n    return new $()\n  },\n\n  destroy () {\n    this.$foot?.remove()\n    this.trigger('destroy')\n  },\n\n  _refreshSetting ($container, showSetting, animate) {\n    animate = !Garnish.prefersReducedMotion() && (typeof animate === 'boolean' ? animate : true)\n\n    if (animate) {\n      if (showSetting) {\n        if ($container.hasClass('hidden')) {\n          $container\n            .removeClass('hidden')\n            .css({\n              opacity: 0,\n              marginBottom: -($container.outerHeight())\n            })\n            .velocity({\n              opacity: 1,\n              marginBottom: 24\n            }, 'fast')\n        }\n      } else if (!$container.hasClass('hidden')) {\n        $container\n          .css({\n            opacity: 1,\n            marginBottom: 24\n          })\n          .velocity({\n            opacity: 0,\n            marginBottom: -($container.outerHeight())\n          }, 'fast', () => {\n            $container.addClass('hidden')\n          })\n      }\n    } else {\n      $container\n        .toggleClass('hidden', !showSetting)\n        .css('margin-bottom', showSetting ? 24 : '')\n    }\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Garnish from 'garnish'\nimport NS from '../namespace'\nimport Settings from './Settings'\n\nconst _defaults = {\n  namespace: [],\n  id: null,\n  sortOrder: 0,\n  fieldLayoutId: null,\n  fieldLayoutConfig: null,\n  name: '',\n  handle: '',\n  description: '',\n  enabled: true,\n  ignorePermissions: true,\n  minBlocks: 0,\n  maxBlocks: 0,\n  minSiblingBlocks: 0,\n  maxSiblingBlocks: 0,\n  minChildBlocks: 0,\n  maxChildBlocks: 0,\n  topLevel: true,\n  childBlocks: null,\n  childBlockTypes: [],\n  html: null,\n  js: null,\n  errors: {}\n}\n\nexport default Settings.extend({\n\n  _templateNs: [],\n  _childBlockTypes: [],\n  _initialised: false,\n\n  $container: null,\n  $nameInput: new $(),\n  $handleInput: new $(),\n  $descriptionInput: new $(),\n  $minBlocksInput: new $(),\n  $maxBlocksInput: new $(),\n  $minSiblingBlocksInput: new $(),\n  $maxSiblingBlocksInput: new $(),\n  $minChildBlocksInput: new $(),\n  $maxChildBlocksInput: new $(),\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._childBlockTypes = []\n    this._childBlocks = settings.childBlocks\n    this._id = settings.id\n    this._fieldLayoutId = settings.fieldLayoutId\n    this._fieldLayoutConfig = settings.fieldLayoutConfig\n    this._errors = settings.errors\n    this._settingsChildBlockTypes = settings.childBlockTypes\n    this._originalSettings = settings\n    this._afterCreateContainer = () => {\n      this.setName(settings.name)\n      this.setHandle(settings.handle)\n      this.setDescription(settings.description)\n      this._setIconId(settings.iconId)\n      this.setEnabled(settings.enabled)\n      this.setIgnorePermissions(settings.ignorePermissions)\n      this.setMinBlocks(settings.minBlocks)\n      this.setMaxBlocks(settings.maxBlocks)\n      this.setMinSiblingBlocks(settings.minSiblingBlocks)\n      this.setMaxSiblingBlocks(settings.maxSiblingBlocks)\n      this.setMinChildBlocks(settings.minChildBlocks)\n      this.setMaxChildBlocks(settings.maxChildBlocks)\n      this.setTopLevel(settings.topLevel)\n    }\n\n    if (typeof settings.html !== 'undefined' && settings.html !== null) {\n      this.createContainer({\n        html: settings.html,\n        js: settings.js\n      })\n    }\n  },\n\n  createContainer (containerData) {\n    // Only create it if it doesn't already exist\n    if (this.$container !== null) {\n      return\n    }\n\n    this.$container = $(containerData.html)\n    this._js = containerData.js ?? ''\n\n    const $neo = this.$container.find('[data-neo-bts]')\n    this.$nameInput = $neo.filter('[data-neo-bts=\"input.name\"]')\n    this.$handleInput = $neo.filter('[data-neo-bts=\"input.handle\"]')\n    this.$descriptionInput = $neo.filter('[data-neo-bts=\"input.description\"]')\n    this.$iconIdContainer = $neo.filter('[data-neo-bts=\"container.iconId\"]')\n    this.$enabledInput = $neo.filter('[data-neo-bts=\"input.enabled\"]')\n    this.$enabledContainer = $neo.filter('[data-neo-bts=\"container.enabled\"]')\n    this.$ignorePermissionsInput = $neo.filter('[data-neo-bts=\"input.ignorePermissions\"]')\n    this.$ignorePermissionsContainer = $neo.filter('[data-neo-bts=\"container.ignorePermissions\"]')\n    this.$minBlocksInput = $neo.filter('[data-neo-bts=\"input.minBlocks\"]')\n    this.$maxBlocksInput = $neo.filter('[data-neo-bts=\"input.maxBlocks\"]')\n    this.$minSiblingBlocksInput = $neo.filter('[data-neo-bts=\"input.minSiblingBlocks\"]')\n    this.$maxSiblingBlocksInput = $neo.filter('[data-neo-bts=\"input.maxSiblingBlocks\"]')\n    this.$minChildBlocksInput = $neo.filter('[data-neo-bts=\"input.minChildBlocks\"]')\n    this.$minChildBlocksContainer = $neo.filter('[data-neo-bts=\"container.minChildBlocks\"]')\n    this.$maxChildBlocksInput = $neo.filter('[data-neo-bts=\"input.maxChildBlocks\"]')\n    this.$maxChildBlocksContainer = $neo.filter('[data-neo-bts=\"container.maxChildBlocks\"]')\n    this.$topLevelInput = $neo.filter('[data-neo-bts=\"input.topLevel\"]')\n    this.$topLevelContainer = $neo.filter('[data-neo-bts=\"container.topLevel\"]')\n    this.$groupChildBlockTypesInput = $neo.filter('[data-neo-bts=\"input.groupChildBlockTypes\"]')\n    this.$groupChildBlockTypesContainer = $neo.filter('[data-neo-bts=\"container.groupChildBlockTypes\"]')\n    this.$childBlocksInput = $neo.filter('[data-neo-bts=\"input.childBlocks\"]')\n    this.$childBlocksContainer = $neo.filter('[data-neo-bts=\"container.childBlocks\"]')\n    this.$deleteButton = $neo.filter('[data-neo-bts=\"button.delete\"]')\n\n    this._afterCreateContainer()\n  },\n\n  initUi () {\n    // Exit if UI already initialised, or there is no UI to initialise yet\n    if (this._initialised || this.$container === null) {\n      return\n    }\n\n    this.$foot = $(this._js)\n    Garnish.$bod.append(this.$foot)\n\n    Craft.initUiElements(this.$container)\n\n    this._childBlocksSelect = this.$childBlocksInput.data('checkboxSelect')\n    this._enabledLightswitch = this.$enabledInput.data('lightswitch')\n    this._ignorePermissionsLightswitch = this.$ignorePermissionsInput.data('lightswitch')\n    this._topLevelLightswitch = this.$topLevelInput.data('lightswitch')\n    this._groupChildBlockTypesLightswitch = this.$groupChildBlockTypesInput.data('lightswitch')\n    this._handleGenerator = new Craft.HandleGenerator(this.$nameInput, this.$handleInput)\n\n    // Ensure that an existing block type's handle will not be changed if the name is edited first.\n    if (this.getHandle() !== '') {\n      this._handleGenerator.stopListening()\n    }\n\n    for (const blockType of this._settingsChildBlockTypes) {\n      this.addChildBlockType(blockType)\n    }\n\n    this.setChildBlocks(this._childBlocks)\n\n    this.addListener(this.$nameInput, 'keyup change', () => {\n      this.setName(this.$nameInput.val())\n\n      if (this._handleGenerator.listening) {\n        // Wait for the handle to be auto-updated\n        setTimeout(() => this.setHandle(this.$handleInput.val()), 200)\n      }\n    })\n\n    this.addListener(this.$handleInput, 'keyup change textchange', () => this.setHandle(this.$handleInput.val()))\n    this.addListener(this.$descriptionInput, 'keyup change textchange', () => this.setDescription(this.$descriptionInput.val()))\n    this.addListener(this.$iconIdContainer, 'change', () => {\n      setTimeout(\n        () => {\n          const $iconIdInput = this.$iconIdInput\n          const iconId = $iconIdInput.length > 0 ? $iconIdInput.val() : null\n          this._setIconId(iconId)\n        },\n        500\n      )\n    })\n    this.addListener(this._enabledLightswitch, 'change', () => this.setEnabled(this._enabledLightswitch.on))\n    this.addListener(this._ignorePermissionsLightswitch, 'change', () => this.setIgnorePermissions(this._ignorePermissionsLightswitch.on))\n    this.addListener(this.$minBlocksInput, 'keyup change', () => this.setMinBlocks(this.$minBlocksInput.val()))\n    this.addListener(this.$maxBlocksInput, 'keyup change', () => this.setMaxBlocks(this.$maxBlocksInput.val()))\n    this.addListener(this.$minSiblingBlocksInput, 'keyup change', () => this.setMinSiblingBlocks(this.$minSiblingBlocksInput.val()))\n    this.addListener(this.$maxSiblingBlocksInput, 'keyup change', () => this.setMaxSiblingBlocks(this.$maxSiblingBlocksInput.val()))\n    this.addListener(this.$minChildBlocksInput, 'keyup change', () => this.setMinChildBlocks(this.$minChildBlocksInput.val()))\n    this.addListener(this.$maxChildBlocksInput, 'keyup change', () => this.setMaxChildBlocks(this.$maxChildBlocksInput.val()))\n    this.addListener(this.$topLevelInput, 'change', () => this.setTopLevel(this._topLevelLightswitch.on))\n    this.addListener(this.$groupChildBlockTypesInput, 'change', () => this.setTopLevel(this._groupChildBlockTypesLightswitch.on))\n    this.addListener(this.$deleteButton, 'click', () => {\n      if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this block type?'))) {\n        this.destroy()\n      }\n    })\n\n    this.$childBlocksInput.on('change', 'input', () => this._refreshChildBlockSettings())\n\n    this._initialised = true\n  },\n\n  _generateChildBlocksCheckbox (settings) {\n    NS.enter(this._templateNs)\n    const id = NS.value('childBlock-' + settings.getId(), '-')\n    const name = NS.fieldName('childBlocks')\n    NS.leave()\n\n    return $(`\n      <div data-neo-btsc=\"container.${settings.getId()}\">\n        <input type=\"checkbox\" value=\"${settings.getHandle()}\" id=\"${id}\" class=\"checkbox\" name=\"${name}[]\" data-neo-btsc=\"input.${settings.getId()}\">\n        <label for=\"${id}\" data-neo-btsc=\"text.label\">${settings.getName()}</label>\n      </div>`)\n  },\n\n  get $iconIdInput () {\n    return this.$iconIdContainer.find('input[type=\"hidden\"]')\n  },\n\n  getFocusInput () {\n    return this.$nameInput\n  },\n\n  getId () {\n    return this._id\n  },\n\n  getFieldLayoutId () {\n    return this._fieldLayoutId\n  },\n\n  getFieldLayoutConfig () {\n    return Object.assign({}, this._fieldLayoutConfig)\n  },\n\n  isNew () {\n    return /^new/.test(this.getId())\n  },\n\n  getErrors () {\n    return this._errors\n  },\n\n  /**\n   * @deprecated in 3.8.0\n   */\n  setSortOrder (_) {\n    console.warn('BlockTypeSettings.setSortOrder() is deprecated and no longer used.')\n  },\n\n  getName () { return this._name },\n  setName (name) {\n    if (name !== this._name) {\n      const oldName = this._name\n      this._name = name\n\n      if (this.$nameInput.val() !== this._name) {\n        this.$nameInput.val(this._name)\n      }\n\n      this.trigger('change', {\n        property: 'name',\n        oldValue: oldName,\n        newValue: this._name\n      })\n    }\n  },\n\n  getHandle () { return this._handle },\n  setHandle (handle) {\n    if (handle !== this._handle) {\n      const oldHandle = this._handle\n      this._handle = handle\n\n      if (this.$handleInput.val() !== this._handle) {\n        this.$handleInput.val(this._handle)\n      }\n\n      this.trigger('change', {\n        property: 'handle',\n        oldValue: oldHandle,\n        newValue: this._handle\n      })\n    }\n  },\n\n  getDescription () { return this._description },\n  setDescription (description) {\n    if (description !== this._description) {\n      const oldDescription = this._description\n      this._description = description\n\n      if (this.$descriptionInput.val() !== this._description) {\n        this.$descriptionInput.val(this._description)\n      }\n\n      this.trigger('change', {\n        property: 'description',\n        oldValue: oldDescription,\n        newValue: this._description\n      })\n    }\n  },\n\n  getIconId () { return this._iconId },\n  _setIconId (iconId) {\n    if (iconId !== this._iconId) {\n      const oldIconId = this._iconId\n      this._iconId = iconId\n\n      if (this.$iconIdInput.val() !== this._iconId) {\n        // TODO\n        // This is normally where we would reset the input value, but since the icon ID setting is an asset field, we\n        // would also need to update the element HTML. This would be good to implement in the future, and then this\n        // method could be made public.\n      }\n\n      this.trigger('change', {\n        property: 'iconId',\n        oldValue: oldIconId,\n        newValue: this._iconId\n      })\n    }\n  },\n\n  getEnabled () { return this._enabled },\n  setEnabled (enabled) { this._setLightswitchField('enabled', enabled) },\n\n  getIgnorePermissions () { return this._ignorePermissions },\n  setIgnorePermissions (ignore) { this._setLightswitchField('ignorePermissions', ignore) },\n\n  getMinBlocks () { return this._minBlocks },\n  setMinBlocks (minBlocks) { this._setBlocksConstraint('minBlocks', minBlocks) },\n\n  getMaxBlocks () { return this._maxBlocks },\n  setMaxBlocks (maxBlocks) { this._setBlocksConstraint('maxBlocks', maxBlocks) },\n\n  getMinSiblingBlocks () { return this._minSiblingBlocks },\n  setMinSiblingBlocks (minSiblingBlocks) { this._setBlocksConstraint('minSiblingBlocks', minSiblingBlocks) },\n\n  getMaxSiblingBlocks () { return this._maxSiblingBlocks },\n  setMaxSiblingBlocks (maxSiblingBlocks) { this._setBlocksConstraint('maxSiblingBlocks', maxSiblingBlocks) },\n\n  getMinChildBlocks () { return this._minChildBlocks },\n  getMaxChildBlocks () { return this._maxChildBlocks },\n  setMinChildBlocks (minChildBlocks) { this._setBlocksConstraint('minChildBlocks', minChildBlocks) },\n  setMaxChildBlocks (maxChildBlocks) { this._setBlocksConstraint('maxChildBlocks', maxChildBlocks) },\n  _setBlocksConstraint (mode, value) {\n    const privateProp = `_${mode}`\n    const jqueryProp = `$${mode}Input`\n    const oldValue = this[privateProp]\n    const newValue = Math.max(0, value | 0)\n\n    if (newValue === 0) {\n      this[jqueryProp].val(null)\n    }\n\n    if (oldValue !== newValue) {\n      this[privateProp] = newValue\n\n      if (this[privateProp] > 0 && parseInt(this[jqueryProp].val()) !== this[privateProp]) {\n        this[jqueryProp].val(this[privateProp])\n      }\n\n      this.trigger('change', {\n        property: mode,\n        oldValue,\n        newValue: this[privateProp]\n      })\n    }\n  },\n\n  getTopLevel () { return this._topLevel ?? this._originalSettings.topLevel },\n  setTopLevel (topLevel) { this._setLightswitchField('topLevel', topLevel) },\n\n  _setLightswitchField (property, value) {\n    const privateProp = `_${property}`\n    const lightswitchProp = `${privateProp}Lightswitch`\n    const oldValue = this[privateProp]\n    const newValue = !!value\n\n    if (oldValue !== newValue) {\n      this[privateProp] = newValue\n\n      if (this[lightswitchProp] && this[lightswitchProp].on !== this[privateProp]) {\n        this[lightswitchProp].on = this[privateProp]\n        this[lightswitchProp].toggle()\n      }\n\n      this.trigger('change', {\n        property,\n        oldValue,\n        newValue\n      })\n    }\n  },\n\n  getChildBlocks () {\n    const select = this._childBlocksSelect\n    const childBlocks = []\n\n    if (typeof select === 'undefined') {\n      return this._childBlocks === true ? true : Array.from(this._childBlocks ?? [])\n    }\n\n    if (select.$all.prop('checked')) {\n      return true\n    }\n\n    select.$options.each(function (index) {\n      const $option = $(this)\n\n      if ($option.prop('checked')) {\n        childBlocks.push($option.val())\n      }\n    })\n\n    return childBlocks.length > 0 ? childBlocks : false\n  },\n\n  setChildBlocks (childBlocks) {\n    const select = this._childBlocksSelect\n\n    if (childBlocks === true || childBlocks === '*') {\n      select.$all.prop('checked', true)\n      select.onAllChange()\n    } else if (Array.isArray(childBlocks)) {\n      select.$all.prop('checked', false)\n\n      for (const handle of childBlocks) {\n        select.$options.filter(`[value=\"${handle}\"]`).prop('checked', true)\n      }\n    } else {\n      select.$all.prop('checked', false)\n      select.$options.prop('checked', false)\n    }\n\n    this._refreshChildBlockSettings(false)\n  },\n\n  addChildBlockType (blockType) {\n    if (!this._childBlockTypes.includes(blockType)) {\n      const settings = blockType.getSettings()\n      const $existingCheckbox = this.$childBlocksContainer.find(`[data-neo-btsc=\"input.${settings.getId()}\"]`)\n      const $checkbox = $existingCheckbox.length > 0\n        ? $existingCheckbox\n        : this._generateChildBlocksCheckbox(settings)\n\n      this._childBlockTypes.push(blockType)\n\n      if ($existingCheckbox.length === 0) {\n        this.$childBlocksContainer.append($checkbox)\n        this._refreshChildBlocks(blockType)\n      }\n\n      const select = this._childBlocksSelect\n      const allChecked = select.$all.prop('checked')\n      select.$options = select.$options.add($checkbox.find('input'))\n      if (allChecked) select.onAllChange()\n\n      const eventNs = '.childBlock' + this.getId()\n      settings.on('change' + eventNs, e => this['@onChildBlockTypeChange'](e, blockType, $checkbox))\n      settings.on('destroy' + eventNs, e => this.removeChildBlockType(blockType))\n    }\n  },\n\n  removeChildBlockType (blockType) {\n    const index = this._childBlockTypes.indexOf(blockType)\n    if (index >= 0) {\n      this._childBlockTypes.splice(index, 1)\n\n      const settings = blockType.getSettings()\n      const $checkbox = this.$childBlocksContainer.children().eq(index)\n\n      $checkbox.remove()\n\n      const select = this._childBlocksSelect\n      select.$options = select.$options.remove($checkbox.find('input'))\n\n      const eventNs = '.childBlock' + this.getId()\n      settings.off(eventNs)\n\n      this._refreshChildBlocks(blockType)\n    }\n  },\n\n  getConditions () {\n    NS.enter(this._templateNs)\n    const baseInputName = NS.toFieldName().replaceAll('\\\\', '\\\\\\\\')\n    NS.leave()\n    const baseConditionInputNameWithExtraSlash = `${baseInputName}[conditions]`\n    const baseConditionInputName = baseConditionInputNameWithExtraSlash.replaceAll('\\\\\\\\', '\\\\')\n    const conditionInputNames = this.$container\n      .find(`[name^=\"${baseConditionInputNameWithExtraSlash}\"]`)\n      .get()\n      .map((condition) => condition.name)\n\n    const allFormData = new window.FormData(this.$container.closest('form').get(0))\n    const conditionsData = {}\n\n    conditionInputNames.forEach((conditionInputName) => {\n      let conditionsSubData = conditionsData\n      const conditionsCurrentPath = [baseConditionInputName]\n      const conditionsDataPath = conditionInputName\n        .replace(baseConditionInputName, '')\n        .slice(1, -1)\n        .split('][')\n\n      conditionsDataPath.forEach((pathStep, i) => {\n        conditionsCurrentPath.push(`[${pathStep}]`)\n\n        if (pathStep !== '' && !(pathStep in conditionsSubData)) {\n          if (pathStep === 'values') {\n            conditionsSubData[pathStep] = []\n          } else if (i < conditionsDataPath.length - 1) {\n            conditionsSubData[pathStep] = {}\n          } else {\n            conditionsSubData[pathStep] = allFormData.get(conditionsCurrentPath.join(''))\n          }\n        } else if (pathStep === '') {\n          conditionsSubData.push(...allFormData.getAll(conditionsCurrentPath.join('')))\n        }\n\n        conditionsSubData = conditionsSubData[pathStep]\n      })\n    })\n\n    return conditionsData\n  },\n\n  _refreshChildBlocks (blockType) {\n    const $sidebarContainer = blockType.getField().$sidebarContainer\n    const $sidebarItem = $sidebarContainer.find(`[data-neo-bt=\"container.${blockType.getId()}\"]`)\n    const $refreshedBlockType = this.$childBlocksContainer.children(`[data-neo-btsc=\"container.${blockType.getId()}\"]`)\n\n    if ($sidebarItem.length > 0) {\n      // Block type reordered\n      const position = $sidebarItem.index('.nc_sidebar_list_item:not(.type-heading)')\n      const $currentChildBlockTypeAtPos = this.$childBlocksContainer.children().eq(position)\n\n      if ($currentChildBlockTypeAtPos.length > 0) {\n        $refreshedBlockType.insertBefore($currentChildBlockTypeAtPos)\n      } else {\n        // Added to the end\n        $refreshedBlockType.appendTo(this.$childBlocksContainer)\n      }\n    } else {\n      // Block type deleted\n      $refreshedBlockType.remove()\n    }\n  },\n\n  _refreshChildBlockSettings (animate) {\n    const showSettings = !!this.getChildBlocks()\n    this._refreshSetting(this.$minChildBlocksContainer, showSettings, animate)\n    this._refreshSetting(this.$maxChildBlocksContainer, showSettings, animate)\n    this._refreshSetting(this.$groupChildBlockTypesContainer, showSettings, animate)\n  },\n\n  '@onChildBlockTypeChange' (e, blockType, $checkbox) {\n    const $neo = $checkbox.find('[data-neo-btsc]')\n    const $input = $neo.filter('[data-neo-btsc=\"input\"]')\n    const $labelText = $neo.filter('[data-neo-btsc=\"text.label\"]')\n\n    switch (e.property) {\n      case 'name':\n        $labelText.text(e.newValue)\n        break\n\n      case 'handle':\n        $input.val(e.newValue)\n        break\n\n      case 'sortOrder':\n        this._refreshChildBlocks(blockType)\n        break\n    }\n  }\n},\n{\n  _totalNewBlockTypes: 0,\n\n  getNewId () {\n    return `new${this._totalNewBlockTypes++}`\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Item from './Item'\nimport NS from '../namespace'\n\nconst _defaults = {\n  namespace: []\n}\n\nexport default Item.extend({\n\n  _templateNs: [],\n\n  init (settings = {}) {\n    this.base(settings)\n\n    settings = Object.assign({}, _defaults, settings)\n\n    const settingsObj = this.getSettings()\n    this._templateNs = NS.parse(settings.namespace)\n    const sidebarItem = this.getField()?.$sidebarContainer.find(`[data-neo-g=\"container.${this.getId()}`)\n\n    if (sidebarItem?.length > 0) {\n      this.$container = sidebarItem\n    } else {\n      this.$container = this._generateGroup(settingsObj)\n    }\n\n    const $neo = this.$container.find('[data-neo-g]')\n    this.$nameText = $neo.filter('[data-neo-g=\"text.name\"]')\n    this.$moveButton = $neo.filter('[data-neo-g=\"button.move\"]')\n\n    if (settingsObj) {\n      settingsObj.on('change', () => this._updateTemplate())\n      settingsObj.on('destroy', () => this.trigger('destroy'))\n    }\n\n    this.deselect()\n  },\n\n  _generateGroup (settings) {\n    const sortOrderNamespace = [...this._templateNs]\n    sortOrderNamespace.pop()\n    NS.enter(sortOrderNamespace)\n    const sortOrderName = NS.fieldName('sortOrder')\n    NS.leave()\n\n    return $(`\n      <div class=\"nc_sidebar_list_item type-heading\" data-neo-g=\"container.${this.getId()}\">\n        <div class=\"label\" data-neo-g=\"text.name\">${settings.getName() ?? ''}</div>\n        <a class=\"move icon\" title=\"${Craft.t('neo', 'Reorder')}\" role=\"button\" data-neo-g=\"button.move\"></a>\n        <input type=\"hidden\" name=\"${sortOrderName}[]\" value=\"group:${this.getId()}\" data-neo-g=\"input.sortOrder\">\n      </div>`)\n  },\n\n  getId () {\n    return this.getSettings().getId()\n  },\n\n  toggleSelect: function (select) {\n    this.base(select)\n\n    const settings = this.getSettings()\n    const selected = this.isSelected()\n\n    if (settings) {\n      settings.$container.toggleClass('hidden', !selected)\n    }\n\n    this.$container.toggleClass('is-selected', selected)\n  },\n\n  _updateTemplate () {\n    const settings = this.getSettings()\n\n    if (settings) {\n      this.$nameText.text(settings.getName())\n    }\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport NS from '../namespace'\nimport Settings from './Settings'\n\nconst _defaults = {\n  namespace: [],\n  id: null,\n  sortOrder: 0,\n  name: '',\n  alwaysShowDropdown: null,\n  defaultAlwaysShowGroupDropdowns: true\n}\n\nexport default Settings.extend({\n\n  _templateNs: [],\n\n  $sortOrderInput: new $(),\n  $nameInput: new $(),\n  $handleInput: new $(),\n  $maxBlocksInput: new $(),\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._id = settings.id\n    this._alwaysShowDropdown = settings.alwaysShowDropdown\n    this._defaultAlwaysShowGroupDropdowns = settings.defaultAlwaysShowGroupDropdowns\n\n    this.$container = this._generateGroupSettings()\n\n    const $neo = this.$container.find('[data-neo-gs]')\n    this.$nameInput = $neo.filter('[data-neo-gs=\"input.name\"]')\n    this.$deleteButton = $neo.filter('[data-neo-gs=\"button.delete\"]')\n    this.$alwaysShowDropdownContainer = $neo.filter('[data-neo-gs=\"container.alwaysShowDropdown\"]')\n\n    this.setName(settings.name)\n\n    this.addListener(this.$nameInput, 'keyup change', () => this.setName(this.$nameInput.val()))\n    this.addListener(this.$deleteButton, 'click', () => {\n      if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this group?'))) {\n        this.destroy()\n      }\n    })\n  },\n\n  _generateGroupSettings () {\n    NS.enter(this._templateNs)\n    const nameInputId = NS.value('name', '-')\n    const nameInputName = NS.fieldName('name')\n    const alwaysShowDropdownId = NS.value('alwaysShowDropdown', '-')\n    const alwaysShowDropdownName = NS.fieldName('alwaysShowDropdown')\n    NS.leave()\n    const alwaysShowDropdownOptions = [\n      {\n        value: 'show',\n        label: Craft.t('neo', 'Show')\n      },\n      {\n        value: 'hide',\n        label: Craft.t('neo', 'Hide')\n      },\n      {\n        value: 'global',\n        label: this._defaultAlwaysShowGroupDropdowns ? Craft.t('neo', 'Use global setting (Show)') : Craft.t('neo', 'Use global setting (Hide)')\n      }\n    ]\n    const $nameInput = Craft.ui.createTextField({\n      type: 'text',\n      id: nameInputId,\n      name: nameInputName,\n      label: Craft.t('neo', 'Name'),\n      instructions: Craft.t('neo', 'This can be left blank if you just want an unlabeled separator.'),\n      value: this.getName()\n    })\n    $nameInput.find('input').attr('data-neo-gs', 'input.name')\n\n    return $(`\n      <div>\n        <div>\n          ${$('<div class=\"field\">').append($nameInput).html()}\n          <div data-neo-gs=\"container.alwaysShowDropdown\">\n            <div class=\"field\">\n              ${Craft.ui.createSelectField({\n                label: Craft.t('neo', 'Always Show Dropdown?'),\n                instructions: Craft.t('neo', 'Whether to show the dropdown for this group if it only has one available block type.'),\n                id: alwaysShowDropdownId,\n                name: alwaysShowDropdownName,\n                options: alwaysShowDropdownOptions,\n                value: this._alwaysShowDropdown ? 'show' : (this._alwaysShowDropdown === false ? 'hide' : 'global')\n              }).html()}\n            </div>\n          </div>\n        </div>\n        <hr>\n        <a class=\"error delete\" data-neo-gs=\"button.delete\">${Craft.t('neo', 'Delete group')}</a>\n      </div>`)\n  },\n\n  getFocusInput () {\n    return this.$nameInput\n  },\n\n  getId () {\n    return this._id\n  },\n\n  /**\n   * @deprecated in 3.8.0\n   */\n  setSortOrder (_) {\n    console.warn('GroupSettings.setSortOrder() is deprecated and no longer used.')\n  },\n\n  getName () { return this._name },\n  setName (name) {\n    if (name !== this._name) {\n      const oldName = this._name\n      this._name = name\n\n      this.$nameInput.val(this._name)\n      this._refreshAlwaysShowDropdown()\n\n      this.trigger('change', {\n        property: 'name',\n        oldValue: oldName,\n        newValue: this._name\n      })\n    }\n  },\n\n  getAlwaysShowDropdown () { return this._alwaysShowDropdown },\n\n  _refreshAlwaysShowDropdown (animate) {\n    this._refreshSetting(this.$alwaysShowDropdownContainer, !!this._name, animate)\n  }\n},\n{\n  _totalNewGroups: 0,\n\n  getNewId () {\n    return `new${this._totalNewGroups++}`\n  }\n})\n","import $ from 'jquery'\nimport '../jquery-extensions'\n\nimport Garnish from 'garnish'\nimport Craft from 'craft'\nimport { v4 as uuidv4 } from 'uuid'\nimport NS from '../namespace'\n\nimport BlockType from './BlockType'\nimport BlockTypeSettings from './BlockTypeSettings'\nimport BlockTypeFieldLayout from './BlockTypeFieldLayout'\nimport Group from './Group'\nimport GroupSettings from './GroupSettings'\nimport './styles/configurator.scss'\n\nconst _defaults = {\n  namespace: [],\n  blockTypes: [],\n  groups: [],\n  blockTypeSettingsHtml: '',\n  blockTypeSettingsJs: '',\n  fieldLayoutHtml: ''\n}\n\nexport default Garnish.Base.extend({\n\n  _templateNs: [],\n  _items: [],\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    const inputIdPrefix = Craft.formatInputId(settings.namespace)\n    const $field = $(`#${inputIdPrefix}-neo-configurator`)\n    this.$container = $field.children('.field').children('.input')\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._blockTypeSettingsHtml = settings.blockTypeSettingsHtml\n    this._blockTypeSettingsJs = settings.blockTypeSettingsJs\n    this._fieldLayoutHtml = settings.fieldLayoutHtml\n    this._items = []\n\n    const $neo = this.$container.find('[data-neo]')\n    this.$mainContainer = $neo.filter('[data-neo=\"container.main\"]')\n    this.$sidebarContainer = $neo.filter('[data-neo=\"container.sidebar\"]')\n    this.$blockTypesContainer = $neo.filter('[data-neo=\"container.blockTypes\"]')\n    this.$settingsContainer = $neo.filter('[data-neo=\"container.settings\"]')\n    this.$fieldLayoutContainer = $neo.filter('[data-neo=\"container.fieldLayout\"]')\n    this.$blockTypeButton = $neo.filter('[data-neo=\"button.blockType\"]')\n    this.$groupButton = $neo.filter('[data-neo=\"button.group\"]')\n    this.$settingsButton = $neo.filter('[data-neo=\"button.settings\"]')\n    this.$fieldLayoutButton = $neo.filter('[data-neo=\"button.fieldLayout\"]')\n\n    this._itemSort = new Garnish.DragSort(null, {\n      container: this.$blockTypeItemsContainer,\n      handle: '[data-neo-bt=\"button.move\"], [data-neo-g=\"button.move\"]',\n      axis: 'y',\n      onSortChange: () => this._updateItemOrder()\n    })\n\n    // Add the existing block types and groups\n    const existingItems = []\n    const btNamespace = [...this._templateNs, 'items', 'blockTypes']\n    const gNamespace = [...this._templateNs, 'items', 'groups']\n\n    for (const btInfo of settings.blockTypes) {\n      const btSettings = new BlockTypeSettings({\n        namespace: [...btNamespace, btInfo.id],\n        sortOrder: btInfo.sortOrder,\n        id: btInfo.id,\n        name: btInfo.name,\n        handle: btInfo.handle,\n        description: btInfo.description,\n        iconId: btInfo.iconId,\n        enabled: btInfo.enabled,\n        ignorePermissions: btInfo.ignorePermissions,\n        minBlocks: btInfo.minBlocks,\n        maxBlocks: btInfo.maxBlocks,\n        minSiblingBlocks: btInfo.minSiblingBlocks,\n        maxSiblingBlocks: btInfo.maxSiblingBlocks,\n        minChildBlocks: btInfo.minChildBlocks,\n        maxChildBlocks: btInfo.maxChildBlocks,\n        topLevel: btInfo.topLevel,\n        html: btInfo.settingsHtml,\n        js: btInfo.settingsJs,\n        errors: btInfo.errors,\n        fieldLayoutId: btInfo.fieldLayoutId,\n        fieldLayoutConfig: btInfo.fieldLayoutConfig,\n        childBlockTypes: existingItems.filter(item => item instanceof BlockType)\n      })\n\n      const blockType = new BlockType({\n        namespace: btNamespace,\n        field: this,\n        settings: btSettings\n      })\n\n      blockType.on('copy.configurator', () => this._copyBlockType(blockType))\n      blockType.on('paste.configurator', () => this._pasteBlockType())\n      blockType.on('clone.configurator', () => this._createBlockTypeFrom(blockType))\n      blockType.on('beforeLoad.configurator', () => {\n        this.$fieldLayoutContainer.append(\n          $('<span class=\"spinner\"/></span>')\n        )\n        this.$settingsContainer.append(\n          $('<span class=\"spinner\"/></span>')\n        )\n      })\n      blockType.on('afterLoad.configurator', () => {\n        this.$fieldLayoutContainer.children('.spinner').remove()\n        this.$settingsContainer.children('.spinner').remove()\n      })\n      existingItems.push(blockType)\n    }\n\n    for (const gInfo of settings.groups) {\n      const gSettings = new GroupSettings({\n        namespace: [...gNamespace, gInfo.id],\n        sortOrder: gInfo.sortOrder,\n        id: gInfo.id,\n        name: gInfo.name,\n        alwaysShowDropdown: gInfo.alwaysShowDropdown,\n        defaultAlwaysShowGroupDropdowns: settings.defaultAlwaysShowGroupDropdowns\n      })\n\n      const group = new Group({\n        namespace: gNamespace,\n        field: this,\n        settings: gSettings\n      })\n\n      existingItems.push(group)\n    }\n\n    for (const item of existingItems.sort((a, b) => a.getSortOrder() - b.getSortOrder())) {\n      this.addItem(item)\n    }\n\n    for (const blockType of this.getBlockTypes()) {\n      const btSettings = blockType.getSettings()\n\n      if (btSettings?.$container) {\n        const info = settings.blockTypes.find(i => i.handle === btSettings.getHandle())\n        btSettings.setChildBlocks(info.childBlocks)\n      }\n    }\n\n    // Make sure menu states (for pasting block types) are updated when changing tabs\n    const refreshPasteOptions = () => {\n      const noPasteData = !window.localStorage.getItem('neo:copyBlockType')\n\n      for (const blockType of this.getBlockTypes()) {\n        blockType.$actionsMenu.find('[data-action=\"paste\"]').parent().toggleClass('disabled', noPasteData)\n      }\n    }\n\n    refreshPasteOptions()\n    this.addListener(document, 'visibilitychange.configurator', refreshPasteOptions)\n\n    this.selectTab('settings')\n\n    this.addListener(this.$blockTypeButton, 'click', '@newBlockType')\n    this.addListener(this.$groupButton, 'click', '@newGroup')\n    this.addListener(this.$settingsButton, 'click', () => this.selectTab('settings'))\n    this.addListener(this.$fieldLayoutButton, 'click', () => this.selectTab('fieldLayout'))\n  },\n\n  addItem (item, index = -1) {\n    const settings = item.getSettings()\n\n    if (!document.contains(item.$container[0])) {\n      this._insertAt(item.$container, index)\n    }\n\n    if (!this._itemSort.$items.filter(item.$container).length === 0) {\n      this._itemSort.addItems(item.$container)\n    }\n\n    if (settings?.$container) {\n      this.$settingsContainer.append(settings.$container)\n\n      if (item instanceof BlockType) {\n        settings.initUi()\n      }\n    }\n\n    this.$mainContainer.removeClass('hidden')\n\n    this.addListener(item.$container, 'click', '@selectItem')\n    item.on('destroy.configurator', () => this.removeItem(item, false))\n\n    if (item instanceof BlockType) {\n      this._addFieldLayout(item.getFieldLayout())\n    }\n\n    this._items.push(item)\n\n    // Only bother updating the item order if the item wasn't just being appended\n    if (index >= 0 && index < this._items.length - 1) {\n      this._updateItemOrder()\n    }\n\n    if (item instanceof BlockType) {\n      for (const blockType of this.getBlockTypes()) {\n        const btSettings = blockType.getSettings()\n        if (btSettings?.$container) {\n          btSettings.addChildBlockType(item)\n        }\n      }\n    }\n\n    this.trigger('addItem', {\n      item,\n      index\n    })\n  },\n\n  _addFieldLayout (fieldLayout) {\n    if (fieldLayout) {\n      this.$fieldLayoutContainer.append(fieldLayout.$container)\n    }\n  },\n\n  removeItem (item, showConfirm) {\n    showConfirm = (typeof showConfirm === 'boolean' ? showConfirm : false)\n\n    if (showConfirm) {\n      const message = Craft.t('neo', 'Are you sure you want to delete this {type}?', {\n        type:\n        item instanceof BlockType\n          ? 'block type'\n          : item instanceof Group\n            ? 'group'\n            : 'item'\n      })\n\n      if (window.confirm(message)) {\n        this.removeItem(item, false)\n      }\n    } else {\n      const settings = item.getSettings()\n\n      this._itemSort.removeItems(item.$container)\n\n      item.$container.remove()\n\n      if (settings?.$container) {\n        settings.$container.remove()\n      }\n\n      if (item instanceof BlockType) {\n        const fieldLayout = item.getFieldLayout()\n        if (fieldLayout) fieldLayout.$container.remove()\n      }\n\n      this.removeListener(item.$container, 'click')\n      item.off('.configurator')\n\n      this._items = this._items.filter((oldItem) => oldItem !== item)\n\n      if (this._items.length === 0) {\n        this.$mainContainer.addClass('hidden')\n      }\n\n      this.trigger('removeItem', {\n        item\n      })\n    }\n  },\n\n  getItems () {\n    return Array.from(this._items)\n  },\n\n  getItemByElement ($element) {\n    return this._items.find(item => item.$container.is($element))\n  },\n\n  getSelectedItem () {\n    return this._items.find(item => item.isSelected())\n  },\n\n  selectItem (item, focusInput) {\n    focusInput = (typeof focusInput === 'boolean' ? focusInput : true)\n\n    const settings = item ? item.getSettings() : null\n\n    for (const i of this._items) {\n      const thisIsTheItem = i === item\n      i.toggleSelect(thisIsTheItem)\n\n      if (thisIsTheItem) {\n        const itemIsGroup = !(i instanceof BlockType)\n        this.$fieldLayoutButton.toggleClass('hidden', itemIsGroup)\n\n        if (itemIsGroup) {\n          this.selectTab('settings')\n        }\n      }\n    }\n\n    Craft.ElementThumbLoader.retryAll()\n\n    if (focusInput && settings && !Garnish.isMobileBrowser()) {\n      setTimeout(() => settings.getFocusInput().focus(), 100)\n    }\n  },\n\n  getBlockTypes () {\n    return this._items.filter(item => item instanceof BlockType)\n  },\n\n  getGroups () {\n    return this._items.filter(item => item instanceof Group)\n  },\n\n  selectTab (tab) {\n    this.$settingsContainer.toggleClass('hidden', tab !== 'settings')\n    this.$fieldLayoutContainer.toggleClass('hidden', tab !== 'fieldLayout')\n\n    this.$settingsButton.toggleClass('is-selected', tab === 'settings')\n    this.$fieldLayoutButton.toggleClass('is-selected', tab === 'fieldLayout')\n  },\n\n  _getNewBlockTypeSettingsHtml (blockTypeId, sortOrder) {\n    return this._blockTypeSettingsHtml.replace(/__NEOBLOCKTYPE_ID__/g, blockTypeId)\n  },\n\n  _getNewBlockTypeSettingsJs (blockTypeId) {\n    return this._blockTypeSettingsJs.replace(/__NEOBLOCKTYPE_ID__/g, blockTypeId)\n  },\n\n  _getNewFieldLayoutHtml () {\n    return this._fieldLayoutHtml.replace(\n      /&quot;uid&quot;:&quot;([a-f0-9-]+)&quot;/,\n      `&quot;uid&quot;:&quot;${uuidv4()}&quot;`\n    )\n  },\n\n  _updateItemOrder () {\n    const items = []\n\n    this._itemSort.$items.each((index, element) => {\n      const item = this.getItemByElement(element)\n\n      if (item) {\n        items.push(item)\n      }\n    })\n\n    this._items = items\n  },\n\n  _createBlockTypeFrom (oldBlockType) {\n    const namespace = [...this._templateNs, 'items', 'blockTypes']\n    const id = BlockTypeSettings.getNewId()\n    const selectedItem = this.getSelectedItem()\n    const selectedIndex = selectedItem ? selectedItem.getSortOrder() : -1\n\n    if (oldBlockType === null) {\n      const settings = new BlockTypeSettings({\n        childBlockTypes: this.getBlockTypes(),\n        id,\n        namespace: [...namespace, id],\n        sortOrder: this._items.length,\n        html: this._getNewBlockTypeSettingsHtml(id, selectedIndex),\n        js: this._getNewBlockTypeSettingsJs(id)\n      })\n      const fieldLayout = new BlockTypeFieldLayout({\n        blockTypeId: id,\n        html: this._getNewFieldLayoutHtml(),\n        namespace: [...namespace, id]\n      })\n\n      this._initBlockType(namespace, settings, fieldLayout, selectedIndex)\n    } else {\n      const oldSettings = oldBlockType.getSettings()\n      const settingsObj = {\n        childBlocks: oldSettings.getChildBlocks(),\n        conditions: oldSettings.getConditions(),\n        // Set a timestamp on the handle so it doesn't clash with the old one\n        handle: `${oldSettings.getHandle()}_${Date.now()}`,\n        id,\n        minBlocks: oldSettings.getMinBlocks(),\n        maxBlocks: oldSettings.getMaxBlocks(),\n        minChildBlocks: oldSettings.getMinChildBlocks(),\n        maxChildBlocks: oldSettings.getMaxChildBlocks(),\n        minSiblingBlocks: oldSettings.getMinSiblingBlocks(),\n        maxSiblingBlocks: oldSettings.getMaxSiblingBlocks(),\n        name: oldSettings.getName(),\n        description: oldSettings.getDescription(),\n        iconId: oldSettings.getIconId(),\n        enabled: oldSettings.getEnabled(),\n        ignorePermissions: oldSettings.getIgnorePermissions(),\n        sortOrder: this._items.length,\n        topLevel: oldSettings.getTopLevel()\n      }\n      const settings = new BlockTypeSettings({\n        ...settingsObj,\n        childBlockTypes: this.getBlockTypes(),\n        namespace: [...namespace, id]\n      })\n      const $spinner = $('<div class=\"nc_sidebar_list_item type-spinner\"><span class=\"spinner\"></span></div>')\n      this._insertAt($spinner, selectedIndex)\n\n      oldBlockType.load()\n        .then(() => {\n          const layout = oldBlockType.getFieldLayout().getConfig()\n          const data = {\n            settings: settingsObj,\n            layout: layout.tabs.length > 0 ? layout : null\n          }\n\n          Craft.queue.push(() => new Promise((resolve, reject) => {\n            Craft.sendActionRequest('POST', 'neo/configurator/render-block-type', { data })\n              .then(response => {\n                const fieldLayout = new BlockTypeFieldLayout({\n                  blockTypeId: id,\n                  html: response.data.layoutHtml,\n                  namespace: [...namespace, id]\n                })\n                settings.createContainer({\n                  html: response.data.settingsHtml.replace(/__NEOBLOCKTYPE_ID__/g, id),\n                  js: response.data.settingsJs.replace(/__NEOBLOCKTYPE_ID__/g, id)\n                })\n\n                this.$blockTypesContainer.find('.type-spinner').remove()\n                this._initBlockType(namespace, settings, fieldLayout, selectedIndex)\n                resolve()\n              })\n              .catch(reject)\n          }))\n        })\n        .catch(() => Craft.cp.displayError(Craft.t('neo', 'Couldn’t create new block type.')))\n    }\n  },\n\n  _initBlockType (namespace, settings, fieldLayout, index) {\n    const blockType = new BlockType({\n      namespace,\n      field: this,\n      settings,\n      fieldLayout\n    })\n\n    this.addItem(blockType, index)\n    this.selectItem(blockType)\n    this.selectTab('settings')\n\n    blockType.on('copy.configurator', () => this._copyBlockType(blockType))\n    blockType.on('paste.configurator', () => this._pasteBlockType())\n    blockType.on('clone.configurator', () => this._createBlockTypeFrom(blockType))\n  },\n\n  _copyBlockType (blockType) {\n    blockType.load()\n      .then(() => {\n        const settings = blockType.getSettings()\n        const data = {\n          childBlocks: settings.getChildBlocks(),\n          conditions: settings.getConditions(),\n          description: settings.getDescription(),\n          enabled: settings.getEnabled(),\n          iconId: settings.getIconId(),\n          ignorePermissions: settings.getIgnorePermissions(),\n          handle: settings.getHandle(),\n          layout: blockType.getFieldLayout().getConfig(),\n          minBlocks: settings.getMinBlocks(),\n          maxBlocks: settings.getMaxBlocks(),\n          minChildBlocks: settings.getMinChildBlocks(),\n          maxChildBlocks: settings.getMaxChildBlocks(),\n          minSiblingBlocks: settings.getMinSiblingBlocks(),\n          maxSiblingBlocks: settings.getMaxSiblingBlocks(),\n          name: settings.getName(),\n          topLevel: settings.getTopLevel()\n        }\n\n        window.localStorage.setItem('neo:copyBlockType', JSON.stringify(data))\n        this.getBlockTypes().forEach(bt => bt.$actionsMenu.find('[data-action=\"paste\"]').parent().removeClass('disabled'))\n      })\n      .catch(() => Craft.cp.displayError(Craft.t('neo', 'Couldn’t copy block type.')))\n  },\n\n  _pasteBlockType () {\n    const encodedData = window.localStorage.getItem('neo:copyBlockType')\n\n    if (!encodedData) {\n      return\n    }\n\n    const data = JSON.parse(encodedData)\n    const blockTypeHandles = this.getBlockTypes().map(bt => bt.getSettings().getHandle())\n    const childBlocks = Array.isArray(data.childBlocks)\n      ? data.childBlocks.filter(cb => blockTypeHandles.includes(cb))\n      : (data.childBlocks ? true : [])\n    const settings = new BlockTypeSettings({\n      childBlocks,\n      childBlockTypes: this.getBlockTypes(),\n      conditions: data.conditions,\n      description: data.description,\n      iconId: data.iconId,\n      enabled: data.enabled,\n      ignorePermissions: data.ignorePermissions,\n      handle: data.handle,\n      minBlocks: data.minBlocks,\n      maxBlocks: data.maxBlocks,\n      minChildBlocks: data.minChildBlocks,\n      maxChildBlocks: data.maxChildBlocks,\n      minSiblingBlocks: data.minSiblingBlocks,\n      maxSiblingBlocks: data.maxSiblingBlocks,\n      name: data.name,\n      topLevel: data.topLevel,\n      html: ''\n    })\n\n    const fieldLayout = new BlockTypeFieldLayout({\n      html: this._getNewFieldLayoutHtml(),\n      layout: data.layout\n    })\n\n    const blockType = new BlockType({\n      field: this,\n      settings,\n      fieldLayout\n    })\n\n    this._createBlockTypeFrom(blockType)\n  },\n\n  _insertAt (element, index) {\n    const $element = $(element)\n\n    if (index >= 0 && index < this._items.length) {\n      $element.insertAt(index, this.$blockTypesContainer)\n    } else {\n      this.$blockTypesContainer.append($element)\n    }\n  },\n\n  '@newBlockType' () {\n    this._createBlockTypeFrom(null)\n  },\n\n  '@newGroup' () {\n    const namespace = [...this._templateNs, 'items', 'groups']\n    const id = GroupSettings.getNewId()\n\n    const settings = new GroupSettings({\n      namespace: [...namespace, id],\n      sortOrder: this._items.length,\n      id\n    })\n\n    const group = new Group({\n      namespace,\n      field: this,\n      settings\n    })\n\n    const selected = this.getSelectedItem()\n    const index = selected ? selected.getSortOrder() : -1\n\n    this.addItem(group, index)\n    this.selectItem(group)\n  },\n\n  '@selectItem' (e) {\n    const item = this.getItemByElement(e.currentTarget)\n\n    this.selectItem(item)\n  }\n})\n","import Configurator from './configurator/Configurator'\n\nconst context = window ?? this\nconst configurators = []\n\ncontext.Neo = {\n  Configurator,\n  configurators,\n\n  createConfigurator (settings = {}) {\n    const configurator = new Configurator(settings)\n    configurators.push(configurator)\n\n    return configurator\n  }\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","jQuery","$","index","$parent","this","each","prepend","children","eq","after","Garnish","Craft","randomUUID","crypto","bind","getRandomValues","rnds8","Uint8Array","rng","Error","byteToHex","i","push","toString","slice","unsafeStringify","arr","offset","toLowerCase","options","buf","rnds","random","_stack","enter","segments","join","arguments","length","undefined","fromFieldName","joined","getNamespace","enterByFieldName","fieldName","leave","pop","Array","from","parse","value","indexOf","split","separator","prefix","toFieldName","replace","match","_defaults","settings","$container","_field","_selected","init","assign","field","_settings","getField","getSettings","getSortOrder","select","toggleSelect","deselect","trigger","selected","isSelected","namespace","html","layout","id","blockId","blockName","_templateNs","NS","_id","_blockTypeId","blockTypeId","find","removeAttr","nameInput","name","concat","JSON","stringify","_fld","customizableTabs","customizableUi","updateChildBlocksUiElement","selector","$uiLibraryElement","$uiLibraryElements","filter","$tabUiElement","$tabContainer","toggleClass","hasClass","removeClass","_tabObserver","window","MutationObserver","observe","childList","subtree","getId","getBlockTypeId","getConfig","newConfig","tabs","tab","config","newElements","element","elements","newElement","fieldLayout","Item","extend","_loaded","_this$getField","base","settingsObj","_fieldLayout","sidebarItem","$sidebarContainer","_generateBlockType","$neo","$nameText","$handleText","$moveButton","$actionsButton","$actionsMenu","menubtn","_actionsMenu","data","on","e","addListener","stopPropagation","_updateTemplate","sortOrderNamespace","sortOrderName","errors","getErrors","hasErrors","isArray","keys","getName","getHandle","getFieldLayout","loadFieldLayout","load","Promise","resolve","getFieldLayoutConfig","layoutId","getFieldLayoutId","reject","then","response","_this$_field","BlockTypeFieldLayout","layoutHtml","createContainer","settingsHtml","js","settingsJs","addItem","catch","_settings$$container","text","getTopLevel","_this$_actionsMenu","$option","option","hideMenu","attr","confirm","destroy","_","console","warn","setSortOrder","getFocusElement","_this$$foot","$foot","remove","_refreshSetting","showSetting","animate","css","opacity","marginBottom","outerHeight","velocity","addClass","sortOrder","fieldLayoutId","fieldLayoutConfig","handle","description","enabled","ignorePermissions","minBlocks","maxBlocks","minSiblingBlocks","maxSiblingBlocks","minChildBlocks","maxChildBlocks","topLevel","childBlocks","childBlockTypes","Settings","_childBlockTypes","_initialised","$nameInput","$handleInput","$descriptionInput","$minBlocksInput","$maxBlocksInput","$minSiblingBlocksInput","$maxSiblingBlocksInput","$minChildBlocksInput","$maxChildBlocksInput","_childBlocks","_fieldLayoutId","_fieldLayoutConfig","_errors","_settingsChildBlockTypes","_originalSettings","_afterCreateContainer","setName","setHandle","setDescription","_setIconId","iconId","setEnabled","setIgnorePermissions","setMinBlocks","setMaxBlocks","setMinSiblingBlocks","setMaxSiblingBlocks","setMinChildBlocks","setMaxChildBlocks","setTopLevel","containerData","_containerData$js","_js","$iconIdContainer","$enabledInput","$enabledContainer","$ignorePermissionsInput","$ignorePermissionsContainer","$minChildBlocksContainer","$maxChildBlocksContainer","$topLevelInput","$topLevelContainer","$groupChildBlockTypesInput","$groupChildBlockTypesContainer","$childBlocksInput","$childBlocksContainer","$deleteButton","initUi","_childBlocksSelect","_enabledLightswitch","_ignorePermissionsLightswitch","_topLevelLightswitch","_groupChildBlockTypesLightswitch","_handleGenerator","stopListening","blockType","addChildBlockType","setChildBlocks","val","listening","setTimeout","$iconIdInput","_refreshChildBlockSettings","_generateChildBlocksCheckbox","getFocusInput","isNew","test","_name","oldName","property","oldValue","newValue","_handle","oldHandle","getDescription","_description","oldDescription","getIconId","_iconId","oldIconId","getEnabled","_enabled","_setLightswitchField","getIgnorePermissions","_ignorePermissions","ignore","getMinBlocks","_minBlocks","_setBlocksConstraint","getMaxBlocks","_maxBlocks","getMinSiblingBlocks","_minSiblingBlocks","getMaxSiblingBlocks","_maxSiblingBlocks","getMinChildBlocks","_minChildBlocks","getMaxChildBlocks","_maxChildBlocks","mode","privateProp","jqueryProp","Math","max","parseInt","_this$_topLevel","_topLevel","lightswitchProp","toggle","getChildBlocks","_this$_childBlocks","$all","$options","onAllChange","includes","$existingCheckbox","$checkbox","append","_refreshChildBlocks","allChecked","add","eventNs","removeChildBlockType","splice","off","getConditions","baseInputName","replaceAll","baseConditionInputNameWithExtraSlash","baseConditionInputName","conditionInputNames","map","condition","allFormData","FormData","closest","conditionsData","forEach","conditionInputName","conditionsSubData","conditionsCurrentPath","conditionsDataPath","pathStep","getAll","$sidebarItem","$refreshedBlockType","position","$currentChildBlockTypeAtPos","insertBefore","appendTo","showSettings","$input","$labelText","_totalNewBlockTypes","getNewId","_generateGroup","_settings$getName","alwaysShowDropdown","defaultAlwaysShowGroupDropdowns","$sortOrderInput","_alwaysShowDropdown","_defaultAlwaysShowGroupDropdowns","_generateGroupSettings","$alwaysShowDropdownContainer","nameInputId","nameInputName","alwaysShowDropdownId","alwaysShowDropdownName","alwaysShowDropdownOptions","label","type","instructions","_refreshAlwaysShowDropdown","getAlwaysShowDropdown","_totalNewGroups","blockTypes","groups","blockTypeSettingsHtml","blockTypeSettingsJs","fieldLayoutHtml","_items","inputIdPrefix","$field","_blockTypeSettingsHtml","_blockTypeSettingsJs","_fieldLayoutHtml","$mainContainer","$blockTypesContainer","$settingsContainer","$fieldLayoutContainer","$blockTypeButton","$groupButton","$settingsButton","$fieldLayoutButton","_itemSort","container","$blockTypeItemsContainer","axis","onSortChange","_updateItemOrder","existingItems","btNamespace","gNamespace","btInfo","btSettings","BlockTypeSettings","item","BlockType","_copyBlockType","_pasteBlockType","_createBlockTypeFrom","gInfo","gSettings","GroupSettings","group","Group","sort","b","getBlockTypes","info","refreshPasteOptions","noPasteData","localStorage","getItem","parent","document","selectTab","contains","_insertAt","$items","addItems","removeItem","_addFieldLayout","showConfirm","message","removeItems","removeListener","oldItem","getItems","getItemByElement","$element","is","getSelectedItem","selectItem","focusInput","thisIsTheItem","itemIsGroup","focus","getGroups","_getNewBlockTypeSettingsHtml","_getNewBlockTypeSettingsJs","_getNewFieldLayoutHtml","uuidv4","items","oldBlockType","selectedItem","selectedIndex","_initBlockType","oldSettings","conditions","Date","now","_objectSpread","$spinner","setItem","bt","encodedData","blockTypeHandles","cb","insertAt","currentTarget","context","_window","configurators","Neo","Configurator","createConfigurator","configurator"],"sourceRoot":""}